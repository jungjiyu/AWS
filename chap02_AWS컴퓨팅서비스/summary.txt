
2.1 AWS 컴퓨팅 서비스
	
(클라우드) 워크로드 workload >> 주어진 기간 안에 처리되어야할 작업의 할당량

컴퓨팅 Computing >> 계산하다. 답을 구하다. 
	: computing 자원이라고 하면 보통 "서버" 를 일컫는다.



AWS 의 제품명에 자주 등장하는 "elastic" >> 탄력적인. 
	: 그만큼 필요에 따라 확장 및 축소가 유연하다는 것


AWS Computing Service >> public cloud 에서 computing 자원을 활용하여 다양한 workload 를 수행할 수 있는 서비스
	: AWS Computing 주요 서비스
	******1. EC2 Elastic Compute Cloud : 클라우드 환경에서 가상 서버 제공. 가장 기본적
			: 클라우드 환경에서 서버 자원을 instance 라는 Virtual Machine 형태로 제공하는  AWS 컴퓨팅 서비스
			: C 가 2개여서 E"C2" 인듯
	
		2. ECS Elastic Container Service : 클라우드 환경에서 컨테이너 관리 서비스
			: EC2 기반 관리형 클러스터에서 실행되는 컨테이너 형태의 자원에 대해 배포, 스케줄링, 스케일링 등을 관리하는 서비스

		3. Lambda : 서버리스 컴퓨팅 서비스로, 별도의 서버 설정이 없는 환경(코드만 실행 가능한 환경)을 제공. 
		4. Lightsail : 애플리케이션까지 모든 것을 제공하는 서비스


Amazon EC2 Amazon Elastic Compute Cloud : public cloud 환경에서 확장 가능한 컴퓨팅 자원(=서버)을 제공하여 가상의 서버를 운영할 수 있는 서비스. 
	: instance >> 가상의 컴퓨팅 환경. 가상 서버. 
		: EC2 서비스의 기본 단위가 된다.
		: instance 유형 >>  OS, Architecture , memory 등을 기준으로 다양한 instance 유형이 제공되고, 선택 가능
			: 유형 구조 >> [인스턴스패밀리][인스턴스세대].[인스턴스크기]
				: 인스턴스패밀리 >> 용도별분류
				: 인스턴스 세대 >> 높을 수록 최신 세대. 성능 좋음
				: 인스턴스 크기 >> 클 수록 용량 증가

		: instance 의 동작
			case 1. 최초 인스턴스 시작 : 무의상태 --> pending  --> running 
			case 2. 실행중인 인스턴스 중지 : running  --> stopping  --> stopped 
				: "stopped"상태로 끝나는거지, "temrminated" 상태로 끝나는게 아님 주의
			case 3. 중지된 인스턴스 재시작 : stopped --> pending --> running
			case 4. 중지된 인스턴스 종료 : stopped --> shutting-down --> terminated
			case 5. 실행중인 인스턴스 종료 : running --> shutting-down --> terminated

		: instance 상태 >> 도달 상태와 진행상태
		     : 도달상태
			1. 실행중 running
			2. 중지됨 stopped
				: 인스턴스 영구 삭제가 아닌 일시적 중지 상태로, 얼마든지 다시 시작 가능.
				: stopped상태에서 running 상태로 도달하기 위해선 pending 상태를 거쳐야됨
			3. 종료됨 terminated 		
				: 인스턴스 영구 삭제. 재시작이 어렵다.
				: 참고로 terminated 상태가 되어도 관리 콘솔상에서 바로 삭제되진 않고, 일정시간 정보를 출력하다가 없어진다고 함.

		     : 진행상태
			0. 재부팅 rebooting
			1. 대기중 pending
			2. 중지중 stopping
			3. 종료중 shutting-down



		: instance 구입 옵션 
			: on-demand instance >> 시작하는 인스턴스에 대한 비용을 초 단위로 지불. 쓰는 만큼 나가는 것.
			: saving plans >> 시간당 비용을 약정하여 일관된 컴퓨팅 사용량을 제공. 그러니까 딱 얼마만큼만 쓸 수 있는 것.
			: 예약 instance >> 인스턴스 유형과 리전을 약정하여 일관된 인스턴스를 제공
			: spot instance >> 미사용 중인 인스턴스에 대해 경매 방식 형태로 할당


	: AMI Amazon Machine Image >> 인스턴스를 생성할 필요한 정보( 소프트웨어 구성(운영 체제, 애플리케이션 서버 및 애플리케이션) )를 제공하는 "템플릿"
		: AMI 를 기반으로 인스턴스가 생성된다
			: 하나의 AMI 로 동일한 구성의 여러 인스턴스를 손쉽게 생성 가능. 
			: AMI가 이미지역할, 인스턴스가 컨테이너 역할인 듯?
		: AMI 는 다른 리전으로 복사도 가능하고, 걍 등록 취소도 가능
		: 이걸로 인스턴스 만들 때 운영체제 설정도 하고 그러는거임
		: 종류
			1. AWS Marketpalce 에서 제공하는 서드파티용 AMI
			2. AWS 자체 제공 기본 AMI 
			3. 사용자 정의 AMI
				: how to make
					(1) AWS 자체 제공 기본 AMI로 E2C 인스턴스 생성
					(2) 요구 따라 해당 인스턴스를 수정
					(3) 수정된 인스턴스를 기반으로 AMI 를 생성. 이게 사용자 정의 AMI

					

	: Amazon EC2 storage >> EC2 서버 자원에서 발생되는 다양한 데이터를 보관
		: 이후 챕터에서 Amazon EC2 인스턴스를 넘어 더 자세하게 다룬다. ( S3 , EFS ... )
		: Amazon EC2 인스턴스용 스토리지 유형
			1. instance store : 인스턴스에 바로 붙어있는 저장소로, 인스턴스 생성시 기본적으로 함께 생성됨
				: 일부 인스턴스 유형은 지원하지 않음 주의
					: 당장 실습에 사용되는 t2.micro 인스턴스만 해도 인스턴스 스토어 지원 안한다
				: 직접 붙어있다보니 I/O 가 빠르다
				: 인스턴스의 중지/종료와 함께 데이터가 모두 손실된다 >> 임시적인 저장소로만 활용해야된다. (장기적으로 저장할 목적으론 x)
				: 가게란 의미에서 store 인게아니라, 저장의 의미에서 store 인거임

			2. Amazon EBS Elastic Block Store : 인스턴스(의 외부)에 네트워킹을 통해 연결 및 제거를 하는 형태로 구성되는 블록 스토리지.
				: 외장 하드디스크와 비슷한 개념. 
					: 외장 하드디스크- USB 처럼 컴퓨터 외부에 장착하여 사용 가능한 추가 스토리지 공간
					: SSD Solid State Drive 도 외장하드디스크와 비슷한 개념이라고 한다.
						: 이걸 굳이 왜 썼냐면 AWS 에서 EC2 스토리지 용량 설정할 때 범용SSD 용량을 설정하게 되어있어서 그렇다.
 
				: 관리콘솔을 통해 영구 저장, 스냅샷을 생성해 백업이 가능

	: Amazon EC2 네트워킹 >>  Amazon EC2 인스턴스 통신을 위한 요소들.
		: 전반적인 AWS 네트워킹과 관련한 자세한 내용은 3장에서 자세히
		: Amazon VPC Virtual Private Cloud >> AWS 퍼블릭 클라우드 안에서 논리적으로 격리된 가상의 클라우드 네트워크. 
			: 생성된 Amazon EC2 인스턴스는 별도로 구성된 하나의 Amazon VPC 안에 생성되 네트워킹 됨

			: ENI Elastic Network Interface >> VPC 내에 생성되는 논리적인 네트워크 인터페이스 
				: ENI 를 EC2 인스턴스에 연결하여 네트워킹을 수행하게 된다.
				: 가상의 어댑터


	: Amazon EC2 보안 >> 보안관련
		: 보안 그룹 security group >> Amazon EC2 인스턴스의 송수신 트래픽을 제어하는 가상의 방화벽 역할. 
			: Amazon EC2 인스턴스를 기준으로 수신 트래픽에 대한 인바운드 inbound 규칙과 송신 트래픽에 대한 아웃바운드 outbound 규칙으로 되어있음
			: 대상 트래픽에 대한 허용 또는 거부를 하는 규칙을 정의 가능
				: 트래픽 정의 방법 ex ) 프로토콜 , 포트번호, IP 대역


		: 키페어 key pair >> Amazon EC2 인스턴스에 연결할 때 자격을 증명하는 보안 키 쌍
			: public key 와 private key 로 구성
				: public key는 Amazon EC2 인스턴스에 저장 
				: private key는 사용자 컴퓨터에 별도로 저장
			: Amazon EC2 인스턴스를 생성한 후 가상서버에 접근하여 설정 등이 필요하면, 사용자가 보관하고 있는 프라이빗 키를 활용하여 자격을 증명하고 접근 가능


	: Amazon EC2 모니터링 monitoring >>		
		: EC2인스턴스의 자원은 유한하며, 자원 이상의 부하가 있을 떄는 장애 발생 가능하기에 모니터링하는 것은 매우 중요
		: 모니터링 계획 예시
			- 목표
			- 대상 자원
			- 빈도
			- 수행 도구
			- 수행할 사람
			- 문제 발생시 경보를 알려야할 대상

		: Amazon EC2 도구 종류
			1. 수동 모니터링 도구 >> 관리자가 직접 관리 콘솔로 모니터링하는 방법
				: Amazon EC2 대시보드로 간단히 ,  Amazon Cloud Watch로 상세하게 모니터링 가능

			2. 자동 모니터링 도구 >> 대상 자원의 지표 대해 임곗값을 정하고, 임곗값을 초과하면 경보(alarm)을 내리는 형태의 동적인 모니터링 방법
				: Amazon CloudWatch 경보 시스템으로 동적으로 단일 지표를 관찰 및 지정된 임곗값을 기준으로 경보 작업 수행 가능
					: 이러한 경보 작업은 Amazon SNS Simple Notification Service 라는 알림 시스템으로 관리자 이메일을 호출하거나, Amazon EC2 인스턴스 오토 스케일링(자원을 동적으로 확장) 가능
		
----------------------------------------------------------------------------------------

httpd >> http 데몬 . HTTP Protocol을 지원하는 daemon
	: 웹 서버의 백그라운드에서 실행되는 소프트웨어 프로그램.
	: 이 데몬은 요청에 자동으로 응답하며 HTTP를 사용하여 서비스 할 수 있게 된다
	: 대표적인 httpd >> apache 등이 있다.
	: https://tanglab.tistory.com/entry/httpdHypertext-Transfer-Protocol-Daemon-%EB%9E%80


리눅스 명령어 관련
	: sudo su - VS sudo -s VS sudo -i 
		: sudo su - >> 사용자 자체를 root 로 갈아치움
		: sudo -s >> 현재 쉘 세션에서, 현재 사용자의 권한을 root 로 승격
		: sudo -i >> 새로운 셸 세션을 생성하고, 현재 사용자의 권한을 root 로 승격

	: yum >> 패키지 관리( 수정/삭제 ) 명령어
	: systemctl >> 데몬 관리(실행, 중지, 재시작) 명령어
		: 리눅스는 os 가 부팅되면서 여러 데몬들( systemd 등 )이 실행되고, 그걸 관리하기 위한 명령어가 systemctl 이다.
		; https://junb51.tistory.com/9
	: curl >> HTML URL 을 실행하는 명령어


실습 준비 
    : 이번 실습에서 EC2 인스턴스의 운영체제는 리눅스, 해당 인스턴스 접근은 SSH( Secure SHell )를 통해 셸 명령어 기반으로 설정하게 됨. SSH 클라이언트를 준비해두자.
	SSH 클라이언트 >> 안전한 원격 프로토콜인 SSH를 사용하여 원격 서버 또는 기기에 접속하는 소프트웨어
		: PuTTY 와 Xshell 등
		: 실습에선 MobaXterm 썼는데 난 이미 PuTTy 있으니 그거 씀


    : EC2 키페어 내려 받기 
	: AWS 에서 키페어 생성하고, 프라이빗 키 파일을 내 컴터에 저장해둬야됨
		; AWS 관리 콘솔 페이지에서 서비스 탭 - 컴퓨팅 - EC2 - 네트워크 및 보안 - 키페어 에가서, "키페어 생성" 버튼 클릭
			: 이름은 뭔뜻인지 모르겠는데 일단 교재대로 ongja_key 로 설정함
			: 키 페어 유형 - 그대로 RSA . 
			: 프라이빗 키 파일 형식 - 난 puTTY 를 사용하므로 .ppk 선택 		
				: AWS 에서sms SSH 접속을 위해 기본적으로 확장명이 .pem인 파일을 제공하는데, puTTY 에서는 확장명이 .pem 인 파일 형식을 지원하지 않아 .ppk 로 선택해줘야된다
				: https://progdev.tistory.com/48
		: 저장하고, 저장된 경로 꼭 까먹지 마라 


실습
	step 1. AMI 를 사용해 EC2 인스턴스를 배포
		: AWS 관리 콘솔에서 EC2 탭 클릭해 EC2 대시보드로 들어감
		: 인스턴스 시작 버튼 누름 >> 생성할 인스턴스에 대한 설정할 수 있는 페이지 열림 
			: 이때 다른 리전으로 설정 되있는거 아닌지 확인하고 버튼 눌러라
			: 설정 사항
				- 이름 및 태그 : 
					: 이름은 특이하게도 인스턴스별로 독립적으로 관리되어서, 중복되어도 상관없다고한다
				- AMI: 인스턴스의 소프트웨어 영역(OS 등)을 정의
					: 실습에서는 기본값으로 지정된 Amazon Linux 2 AMI 를 선택

				- 인스턴스 유형 
					: 실습에서는 프리티어 지원 유형인 t2.micro 사용

				- 키페어 : 전에 생성해둔 키페어 선택

				- 네트워크 설정 :
					1. 네트워크 : 기본적으로 생성되어있는 VPC 를 사용 가능하고 기본적으로 그거 쓰게 되어있지만 , 사용자가 직접 생성할 수도 있음
						: 실습에서는 기본 VPC 사용

					2. 퍼블릭 IP 자동 할당 : 활성화
						: 웹 서비스를 제공하려면 public IP 자동 할당은 활성화로 지정해야됨
					3. 보안 그룹 : EC2 인스턴스가 제공할 서비스 접근 제어를 설정
					****: 별도로 체크 
						:SSH 트래픽 허용
						:인터넷에서 HTTP 트래픽 허용 
				
				- 스토리지 구성 : 앞의 GIB 빈칸이 용량, 뒤의 루트 볼륨 빈칸이 EBS스토리지유형선택 이라고 봄 된다
					: 일단 걍 기본값 그대로 냅둠. ( 8GiB 용량의 gp2(범용 SSD) ) 
				
				- 고급 세부 정보 : 실습에선 다루지 않았다
			
	
			: 설정 완료 후 인스턴스 시작 버튼 눌러 인스턴스를 생성한다		
			: 제대로 설정되면 모든 인스턴스 보기에서 확인 가능하고, 체크하면 상세 정보 확인 가능
				: 생성된 내 인스턴스의 public IP  는 따로 메모해두라 
					: 실습에서 생성한 인스턴스의 public IP는 >>  54.180.140.78
			
			

	2. SSH로 EC2 인스턴스에 접속해 웹 서비스를 설정
		; 생성된 인스턴스 정보를 바탕으로 puTTy 설정
			: session 탭의 Host Name >> ec2-user@인스턴스의퍼블릭IP
				: host name 은 인스턴스의 운영체제를 뭘로 선택했냐 따라 달라질 수 있다. 리눅스 OS 를 택한 경우 ec2-user
			: connection 탭의 SSH 의 Auth 의 credentials 의 젤 첫 private key 칸 >> 인스턴스에서 설정한 키 페어의 private key 파일( .ppk ) 설정
			:https://velog.io/@kjdev/8qco7c6i

		: 설정한 puTTy 로 생성한 인스턴스의 SSH 터미널에 접속하여 초기 셋팅
		     : 다음의 명령어 수행
			1. sudo su - >> 슈퍼 유저로 변경 
				: 제대로 변경시 프롬프트가 [ ec2-user@ip어쩌고] 에서 [root@ip어쩌고]로 바뀐다

			2. yum install httpd -y >> http 데몬 설치
   			3. systemctl start httpd >> http 데몬 실행
    			4. curl -L https://bit.ly/afbtest01 > /var/www/html/index.html
				:  https://bit.ly/afbtest01 에서 데이터를 다운 받고, /var/www/html/index.html 에 저장하여 웹서버의 기본 페이지 내용을 새로 다운 받은 파일로 설정한다.

 
	3. EC2 인스턴스에 생성된 웹 서비스에 접속
		: 웹 브라우저에 인스턴스의 public IP 입력 함 앞서 curl 한 내용이 뜬다

	4. EC2 인스턴스의 모니터링을 설정
			: 수동 모니터링 >> 인스턴스의 상세 정보 확인 하는 페이지에서, 모니터링 탭 클릭
				: 여기서 다양한 지표에서의 통계 정보 확인 가능
				: Amazon CloudWatch 대시보드에서 모니터링 수행(=대시보드에 추가)가능하게 설정 가능 >> 대시보드에 추가 버튼 클릭 
					: 이름 입력 후 "생성 버튼" 누르고, "대시보드에 추가"버튼 클릭

			: 자동 모니터링 >> 82쪽 부터 작성 필요

	5. 리눅스 명령어를 사용하여 EC2 인스턴스 정보를 확인
	6. 실습을 위해 생성된 자원을 모두 삭제

 




		


