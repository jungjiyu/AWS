5.1 스토리지 개요

스토리지 storage 
	: 데이터 보관 장소. 저장 장치.
	: USB, 외장하드( SSD, HDD ) 등
		: 외장 하드디스크- USB 처럼 컴퓨터 외부에 장착하여 사용 가능한 추가 스토리지 공간
			: 그러니까 SSD, HDD 하면 아 컴터 외부 탈부착 가능한 추가 스토리지 공간~ 이럼 된다.

--------------------------------------------------------------------------------------------------------------

5.2 스토리지 서비스 및 주요 기능


저장소 프로토콜
	SCSI Small Computer System Interface (스카시)
		: 물리적으로(=네트워크 통한것이아닌 물리적 케이블 같은걸로), 병렬로(=여러 데이터 비트를 동시에 전송) 데이터를 전송
			: 인터넷을 사용하는 방식이 아니기 떄문에 원거리는 지원 안함
		: SCSI 가 진화한건 (iSCSI 가 아니라) SAS 
			: iSCSI 는 진화했다기 보다는, 인터넷에서도 가능하게 한 것.

	iSCSI Internet Small Computer System Interface (아이스카시)
		: 네트워크 통한 데이터 전송, 블록 수준에서 작동 . SCSI 명령을 네트워크를 통해 전송할 수 있도록 한 것.
		: 직접적인 계층 관리 불가
		: 앞에 i 소문자 맞음

	NFS Network File System 
		: 네트워크를 통한 데이터 전송, 파일 수준에서 작동
		: 파일별 조작을 통해 계층 관리 가능


	FC Fiber Channel (에프시. 파이퍼 채널)
		: 광케이블을 사용한 데이터 전송
	: https://blog.naver.com/zagatoson/222446702817


볼륨 volume >> 데이터 저장을 위한 논리적 단위. 장치
	: 그러니까 볼륨 --> (데이터 저장 용도의) 단위 || 장치 라고 해석하면 된다.
		: ex ) 블록스토리지 볼륨 --> (데이터 저장 용도의) 블록스토리지 장치 .



SAN 과 NAS >> 서버와 스토리지의 연결 방식. 여러 매체에서 네트워크를 통해 접속해 파일을 공유 가능하게 함.
	: NAS Network Attached Storage >> 네트워크로 통신하여 저장장치에 연결
		: TCP/IP 와 같은 표준 네트워크로, switch 와 연결하여 사용
		: 덜 비싸고 성능이 딸림

	: SAN Storage Area Network >> 스토리지 전용 네트워킹
		: 대규모 네트워크 사용자를 위해 저장장치를 데이터 서버와 연결하여 별도의 네트워크로 관리하는 고속 네트워크 시스템
		: 광케이블을 사용한 네트워크로, 광케이블 전용 switch 와 연결하여 사용
			: 단순하게 생각하면 광을 이용한 네트워크 == SAN 표준
			: 광케이블을 사용하는 만큼 원거리에 분산된 저장장치에서 데이터를 빠른 속도로 주고받을 수 있음
		: 비싸고 성능 좋음
	: https://www.dknyou.com/blog/?q=YToxOntzOjEyOiJrZXl3b3JkX3R5cGUiO3M6MzoiYWxsIjt9&bmode=view&idx=6123731&t=board


	: SAN Storage Area Network >> 서로 다른 종류의 데이터 저장 장치를 한 데이터 서버에 연결하여 총괄적으로 관리해주는 네트워크
	: NAS Network Attached Storage >> 네트워크에 연결된 파일 수준의 컴퓨터 기억 장치
		: 서로 다른 네트워크 클라이언트에 데이터 접근 권한 제공



		

참고 - 2장에서 EC2 인스턴스 다룰 때 언급되었던 스토리지
	1. instance store : 인스턴스에 바로 붙어있는 저장소로, 인스턴스 생성시 기본적으로 함께 생성됨
		: 일부 인스턴스 유형은 지원하지 않음 주의
		: 직접 붙어있다보니 I/O 가 빠르다
		: 인스턴스의 중지/종료와 함께 데이터가 모두 손실된다 >> 임시적인 저장소로만 활용해야된다. (장기적으로 저장할 목적으론 x)

	2. Amazon EBS Elastic Block Store : 인스턴스(의 외부)에 네트워킹을 통해 연결 및 제거를 하는 형태로 구성되는 블록 스토리지.
		: 외장 하드디스크와 비슷한 개념. 
 
		: 관리콘솔을 통해 영구 저장, 스냅샷을 생성해 백업이 가능



AWS 제공 스토리지 서비스 종류
	1. 블록 block 스토리지 : 데이터를 "블록" 이라는 개별 단위로 분할하여 저장했다가, 서버에서 파일 요청 시 블록들을 재구성하여 하나의 데이터로 서버에 전달해주는 스토리지
		: 각 블록은 고유 식별자가 부여되어 저장된다.
		: 클라우드 환경에서 블록 스토리지의 각 블록은 가상 머신 인스턴스에 위치
			: 일반 컴퓨터에 하드 디스크를 추가하여 C 드라이브, D 드라이브 처럼 논리적으로 구분해서 사용하는 것과 유사
		: 호스트에서 파일 시스템 생성
		: 호스트에서 직접 파일을 액세스하고 기록하며 빠른 성능을 요하는 경우 용이
		:  SAN 또는 가상 머신의 디스크로 사용됨
			: FC , ISCSI 를 이용하여 접근하게 됨

		: Amazon EBS,  (2장에서 언급된) instance store 

	2. 파일 file 스토리지 : 파일 수준, 파일 기반 스토리지
		: 디렉터리 구조로 파일을 저장
		: 계층 구조를 이룸 
			: 각 파일은 폴더에 종속되고, 폴더는 다른 폴더에 종속되는 등
		: 스토리지에서 파일 시스템 생성
		: NFS , CIFS 를 이용하여 접근
		: 개인용 컴퓨터와 서버에서 일상적인 작업을 공유가능 but 정리(indexing)어려움
		: 다수의 장치가 데이터를 공유하여 동일한 서비스를 사용해야하는 경우 용이
		: NAS 에 사용됨
		: Amazon EFS

	3. 객체 object 스토리지 : 데이터 조각을 가져와 객체로 지정, 개별 단위로 저장
		: (계층구조가 아닌) 평면적인 주소 공간
		: 메타데이터로 구성된 객체마다 ID(고유 식별자) 부여
		: OS나 파일 시스템에 의존하지 않으며 데이터 저장하고, 객체에 쉽게 접근 가능
			: 객체의 키(이름)만 알고 있으면 빠르게 대상 검색 가능
				: REST API 사용
		: 저장할 수 있는 데이터의 수와 파일 크기에 제한 없고, 데이터 저장 총 용량이 거의 무제한
		: 대량의 데이터를 저장하거나 다수의 서버에서 해당 데이터에 접근해야하는 경우 용이
		: 대부분의 서비스의 스토리지 서비스로써 사용됨
		: Amazon S3


--------------------------------------------------------------------------------------------------------------

5.3 Amazon EBS



Amazon EBS Elastic Block Store 
	: EC2 인스턴스에 사용 가능한 블록 스토리지 볼륨(장치)을 제공하는 서비스
	: 데이터를 일정한 크기의 블록으로 분산 저장
		: 볼륨 위에 파일 시스템을 생성하거나 하드디스크 드라이브 같은 블록 디바이스를 사용하는 것처럼 볼륨을 사용 가능

	: "운영체제"에 외장하드디스크를 연결해서 데이터를 저장하는 꼴
		: 그러니까, EC2의 운영체제위에서, 일종의 애플리케이션 수행하는 것처럼, 저장공간이 동작된다는 것.
		: EC2는 컨테이너가 아닌, 가상머신을 제공하는 서비스로, 가상머신 답게 운영체제가 있다.

	: 각 데이터는 독립적이며, 고속 네트워크로 연결되어있음. 
		: 각 데이터는 데이터 수명 시간이 독립적임 --> 서로 연결된 인스턴스와 볼륨을 사용하다, 해당 인스턴스를 삭제해도 볼륨은 계속 사용할 수 있고, 그 볼륨에 저장된 데이터도 다른 인스턴스와 연결하여 이어서 사용할 수있다.

	: how to use 
		1. AWS 관리 콘솔에서 커스터마이징해서(필요한 용량과 성능에 맞춰서) 볼륨 생성	
		2. EC2 인스턴스에 연결
		3. 파일 시스템 포맷 
			: 파일 시스템 포맷은 운영체제 마다 다르다 (리눅스 - xfs || ext4 , 윈도우 - NTFS )
		4. 해당 볼륨을 서버에서 마운트한 후 데이터를 해당 디렉터리에 저장하여 사용

	: 인스턴스에 연결된 EBS 볼륨의 구성을 동적으로 변경도 가능
	: 데이터베이스와 같이 데이터 출입이 빈번한 서비스에 적합
	: https://jibinary.tistory.com/150






