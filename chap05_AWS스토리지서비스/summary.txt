5.1 스토리지 개요

스토리지 storage 
	: 데이터 보관 장소. 저장 장치.
	: USB, 외장하드( SSD, HDD ) 등
		: 외장 하드디스크- USB 처럼 컴퓨터 외부에 장착하여 사용 가능한 추가 스토리지 공간
			: 그러니까 SSD, HDD 하면 아 컴터 외부 탈부착 가능한 추가 스토리지 공간~ 이럼 된다.

--------------------------------------------------------------------------------------------------------------

5.2 스토리지 서비스 및 주요 기능


저장소 프로토콜 >> 스토리지 자원을 공유하기 위한 프로토콜
	SCSI Small Computer System Interface (스카시)
		: 물리적으로(=네트워크 통한것이아닌 물리적 케이블 같은걸로), 병렬로(=여러 데이터 비트를 동시에 전송) 데이터를 전송.공유
			: 인터넷을 사용하는 방식이 아니기 떄문에 원거리는 지원 안함
		: SCSI 가 진화한건 (iSCSI 가 아니라) SAS 
			: iSCSI 는 진화했다기 보다는, 인터넷에서도 가능하게 "확장" 한 것.

	iSCSI Internet Small Computer System Interface (아이스카시)
		: 네트워크 통한 데이터 전송, 블록 수준에서 작동 . SCSI 명령을 네트워크를 통해 전송할 수 있도록 한 것.
		: 직접적인 계층 관리 불가
		: 앞에 i 소문자 맞음

	FC Fiber Channel (에프시. 파이퍼 채널)
		: 광케이블을 사용한 "빠른" 데이터 전송, 블록 수준에서 작동
		: 좀 빠른 iSCSI 라고 보면 됨.

	NFS Network File System 
		: 네트워크를 통한 데이터 전송, 파일 수준에서 작동.공유
			: 파일별 조작을 통해 계층 관리 가능

		: iSCSI vs  NFS >> 둘다 원격 자원을 로컬 자원처럼 사용할 수 있게 해주는 기술
			iSCSI : 블록 장치 수준의 접근. 그러니까 (로컬디스크같은) 장치 자체를 공유하는 느낌
			NFS : 파일 시스템 수준의 접근. 그러니까 다같이 파일/폴더만 공유하는 느낌



	: https://blog.naver.com/zagatoson/222446702817



볼륨 volume >> 데이터 저장을 위한 논리적 단위. 장치
	: 그러니까 볼륨 --> (데이터 저장 용도의) 단위 || 장치 라고 해석하면 된다.
		: ex ) 블록스토리지 볼륨 --> (데이터 저장 용도의) 블록스토리지 장치 .



SAN 과 NAS >> 서버와 스토리지의 연결 방식. 여러 매체에서 네트워크를 통해 접속해 파일을 공유 가능하게 함.
	: NAS Network Attached Storage >> 네트워크로 통신하여 저장장치에 연결
		: TCP/IP 와 같은 표준 네트워크를 이용하는 스토리지를 총칭
		: 덜 비싸고 성능이 딸림

	: SAN Storage Area Network >> 스토리지 전용 네트워킹
		: 대규모 네트워크 사용자를 위해 저장장치를 데이터 서버와 연결하여 별도의 네트워크로 관리하는 고속 네트워크 시스템
		: 광케이블을 사용한 네트워크를 이용하는 스토리지를 이용하는 스토리지를 총칭 
			: 단순하게 생각하면 광을 이용한 네트워크 == SAN 표준
			: 광케이블을 사용하는 만큼 원거리에 분산된 저장장치에서 데이터를 빠른 속도로 주고받을 수 있음
			: 광케이블 전용 switch 와 연결하여 사용하게됨
		: 비싸고 성능 좋음
	: https://www.dknyou.com/blog/?q=YToxOntzOjEyOiJrZXl3b3JkX3R5cGUiO3M6MzoiYWxsIjt9&bmode=view&idx=6123731&t=board


	: SAN Storage Area Network >> 서로 다른 종류의 데이터 저장 장치를 한 데이터 서버에 연결하여 총괄적으로 관리해주는 네트워크
	: NAS Network Attached Storage >> 네트워크에 연결된 파일 수준의 컴퓨터 기억 장치
		: 서로 다른 네트워크 클라이언트에 데이터 접근 권한 제공



		

참고 - 2장에서 EC2 인스턴스 다룰 때 언급되었던 스토리지
	1. instance store : 인스턴스에 바로 붙어있는 저장소로, 인스턴스 생성시 기본적으로 함께 생성됨
		: 일부 인스턴스 유형은 지원하지 않음 주의
		: 직접 붙어있다보니 I/O 가 빠르다
		: 인스턴스의 중지/종료와 함께 데이터가 모두 손실된다 >> 임시적인 저장소로만 활용해야된다. (장기적으로 저장할 목적으론 x)

	2. Amazon EBS Elastic Block Store : 인스턴스(의 외부)에 네트워킹을 통해 연결 및 제거를 하는 형태로 구성되는 블록 스토리지.
		: 외장 하드디스크와 비슷한 개념. 
 
		: 관리콘솔을 통해 영구 저장, 스냅샷을 생성해 백업이 가능



AWS 제공 스토리지 서비스 종류
	1. 블록 block 스토리지 : 데이터를 "블록" 이라는 개별 단위로 분할하여 저장했다가, 서버에서 파일 요청 시 블록들을 재구성하여 하나의 데이터로 서버에 전달해주는 스토리지
		: 각 블록은 고유 식별자가 부여되어 저장된다.
		: 클라우드 환경에서 블록 스토리지의 각 블록은 가상 머신 인스턴스에 위치
			: 일반 컴퓨터에 하드 디스크를 추가하여 C 드라이브, D 드라이브 처럼 논리적으로 구분해서 사용하는 것과 유사
		: 호스트에서 파일 시스템 생성
		: FC , iSCSI 를 이용하여 접근 >> 매우 빠르고, 장치 수준의 접근을 하게 된다
			: FC 로 접근하면 광케이블 쓰므로 당연히 빠른거고, iSCSI 를 사용하여 접근한다 해도 이때의 네트워크는 단순한 네트워크가 아닌 고속 네트워크를 의미해서 쨌뜬 빠르다
			: SAN 또는 가상 머신의 디스크로 사용됨
		: Amazon EBS,  (2장에서 언급된) instance store 

	2. 파일 file 스토리지 : 파일 수준, 파일 기반 스토리지
		: 디렉터리 구조로 파일을 저장
		: 계층 구조를 이룸 
			: 각 파일은 폴더에 종속되고, 폴더는 다른 폴더에 종속되는 등
		: 스토리지에서 파일 시스템 생성
		: NFS , CIFS 를 이용하여 접근 >> 그냥 저냥 속도이고, 파일 수준의 접근을 하게 된다
			: NAS 에 사용됨
		: Amazon EFS

	3. 객체 object 스토리지 : 데이터 조각을 가져와 객체로 지정, 개별 단위로 저장
		: (계층구조가 아닌) 평면적인 주소 공간
		: 메타데이터로 구성된 객체마다 ID(고유 식별자) 부여
		: OS나 파일 시스템에 의존하지 않으며 데이터 저장하고, 객체에 쉽게 접근 가능
			: 객체의 키(이름)만 알고 있으면 빠르게 대상 검색 가능
				: REST API 사용
		: 저장할 수 있는 데이터의 수와 파일 크기에 제한 없고, 데이터 저장 총 용량이 거의 무제한
		: 대량의 데이터를 저장하거나 다수의 서버에서 해당 데이터에 접근해야하는 경우 용이
		: 대부분의 서비스의 스토리지 서비스로써 사용됨
		: Amazon S3


--------------------------------------------------------------------------------------------------------------

5.3 Amazon EBS


주기억장치, 보조기억장치
	주기억장치 >> 현재 CPU가 처리하고 있는 내용을 저장하고 있는 기억 장치. 
		: 속도 빠름
		: 전원이 꺼지면 내용이 사라짐	
		: 대표적으론 ROM , RAM 
			ROM Read Only Memory
			Random Access Memory

	보조기억장치 >> 주기억 장치의 용량 부족을 보완하기 위해 사용하는 외부 장치
		: 속도는 좀 느림
		: 전원이 꺼져 있을 때도 정보 유지
		: 대표적으론 SSD, HDD 가 있다.


SSD vs HDD >> 둘다 보조기억 장치. 요즘에는 SSD 쓰지, HDD 안쓴다.
    HDD HardDisk Drive >>
	: 플래터 "디스크"를 이용하여 정보를 (물리적으로) 저장하는 장치 
	: 속도가 느리고 전기도 많이 잡아먹지만 용량당 싸다
	: 하드. 하드디스크드라이브.

    SSD Solid State Drive . Solid State Disk >>
	: "플레시 메모리"와 "반도체"를 이용하여 정보를 (전기적으로) 저장하는 장치
		: 플래시 메모리(Flash Memory) >> 전원이 끊겨도 기억된 내용이 지워지지 않으면서 입력과 수정이 쉽도록 개발한, 빠른 속도의 기억 장치
	: 용량 당 가격이 비싸지만 속도가 빠르고 저전력 
	; https://suzzeong.tistory.com/42
	; https://velog.io/@piczo/IT-%EC%A7%80%EC%8B%9D-%EB%B3%B4%EC%A1%B0%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98-HDD-SSD


IOPS Input/Output opernations Per Second : 초당 처리되는 I/O 갯수. (= HDD, SDD 등 저장장치의 속도 ) 


프로비저닝 Provisioning : 인프라를 구축/할당하는 과정.
	클라우드에서의 하드웨어 프로비저닝 >> 필요한 하드웨어 자원을 할당하는 과정
	



Amazon EBS Elastic Block Store 
	: EC2 인스턴스에 사용 가능한 블록 스토리지 볼륨(장치)을 제공하는 서비스
	: 데이터를 일정한 크기의 블록으로 분산 저장
		: 볼륨 위에 파일 시스템을 생성하거나 하드디스크 드라이브 같은 블록 디바이스를 사용하는 것처럼 볼륨을 사용 가능

	: "운영체제"에 외장하드디스크를 연결해서 데이터를 저장하는 꼴
		: 그러니까, EC2의 운영체제위에서, 일종의 애플리케이션 수행하는 것처럼, 저장공간이 동작된다는 것.
			: EC2는 컨테이너가 아닌, 가상머신을 제공하는 서비스로, 가상머신 답게 운영체제가 있다.

	: 인스턴스와 EBS 볼륨의 관계 >> 독립적이며, 고속 네트워크로 연결되어있음. 
		: 인스턴스와 EBS볼륨은 데이터 수명 시간이 독립적임 --> 서로 연결된 인스턴스와 볼륨을 사용하다, 해당 인스턴스를 삭제해도 볼륨은 계속 사용할 수 있고, 그 볼륨에 저장된 데이터도 다른 인스턴스와 연결하여 이어서 사용할 수있다.
		: 인스턴스와 EBS볼륨이 (독립적이지만) 고속 네트워크로 연결되있기에 , 로컬에 있는 것처럼 쓸 수 있다.
			: 하나의 인스턴스에 여려개의 ESB 볼륨을 연결하여 사용할 수 있고, 한 볼륨은 한번에 하나의 인스턴스에만 연결되있을 수 있다.

	: EBS 와 가용영역 >> EBS 는 가용영역 단위의 서비스. 즉, 특정 가용영역에 종속적
		: 해당 AZ 내의 E2C 인스턴스에만 연결 가능 
		: (데이터 손실 방지를 위해) 해당 가용 영역 내에서 자동으로 데이터를 복제해둔다
		: 특정 AZ 내에서 고성능 스토리지가 필요한 경우에 사용함

	: Amazon EBS 암호화 encryption 기능으로, 암호화된 EBS 볼륨을 생성 가능
		: AES-256 사용
	: 서비스를 중단할 필요 없이 EBS 볼륨 수정( 유형, 크기, IOPS 용량 등) 가능
		

	: EBS 볼륨 유형
	     : 뭐 처음 생성 이후에도 서비스 중단 없이 수정 가능하니까 넘 심각하게 생각하지 x
		1. SSD 유형 << OS 영역이나, 일반 db 보관용 스토리지 유형 등으로 사용
			(1) 범용 SSD 그룹 (gp2 및 gp3) : 일반적인 경우 사용
			(2) 프로비저닝된 IOPS SSD 볼륨( io1 및 io2 ) :  ㅈㄴ 빠른 접근 필요한 경우 사용

		2. HDD 유형 << 속도와 상관 없이 용량 많이 필요한 경우 추천 ( ex : 데이터 분석 )
			(1) 처리량 최적화 HDD 볼륨 (st1) : 자주 접근하는 경우 사용
			(2) 콜드 HDD 볼륨 ( sc1 ) : 자주 접근하지 않는 경우 사용


	: EBS 볼륨 snapshot >> 특정 시점의 상태를 (사진처럼) 그대로 찍는 기능.  
		: 백업파일 만드는 느낌. 해당 시점의 상태로 돌아갈 수 있다.
		: 이 스냅샷 파일들은 보통 S3 스토리지에 저장된다.
		: 증분식 백업방식을 사용한다. 
			: 증분식 백업 Incremental Backup >> ( 전체를 다 저장하는게 아니라 ) 변화된 부분만 저장한다.
				: 젤 첨 백업에서는 일단 전체 데이터를 백업하고, 이후 백업부터는( 2번째 백업 부터는 ) 새로 변경된 데이터에 대해서만 백업한다.
				: 이름이 "증분" 인건  "increment" , 그러니까 증가한 분량에 대해서만 저장하는 거라서 그렇다.
			: https://inpa.tistory.com/entry/AWS-%F0%9F%93%9A-AMI-Snapshot-%EA%B0%9C%EB%85%90-%EB%B0%B1%EC%97%85-%EC%82%AC%EC%9A%A9%EB%B2%95-%F0%9F%92%AF-%EC%A0%95%EB%A6%AC

			: 증분식 백업 방식을 사용하여 , 그러니까 스냅샷을 찍을 당시엔 겹치지 않는 내용만 찍은 거지만 , 그렇다고 해서 백업할 때 모든 앞선 스냅샷들을 일일이 종합해서 백업시키는게 아니라 해당 스냅샷 한 장 가지고서만 백업을 진행시킨다. 
				: 이게 가능한 이유는 스냅샷을 S3 스토리지에 저장할 때, S3 스토리지의 백엔드에서 앞선 내용을 반영/참조하여, 통합하여 저장시켜줘 해당 스냅샷 자체로써 복원 가능하게 된다고 한다.

		: 스냅샷은 다른 계정으로 공유할 수도 있고, 다른 리전으로 (수동으로) 복제도 가능

	: how to use 
		1. AWS 관리 콘솔에서 커스터마이징해서(필요한 용량과 성능에 맞춰서) 볼륨 생성	
		2. EC2 인스턴스에 연결
		3. 파일 시스템 포맷 
			: 파일 시스템 포맷은 운영체제 마다 다르다 (리눅스 - xfs || ext4 , 윈도우 - NTFS )
		4. 해당 볼륨을 서버에서 마운트한 후 데이터를 해당 디렉터리에 저장하여 사용

	: 인스턴스에 연결된 EBS 볼륨의 구성을 동적으로 변경도 가능
	: 데이터베이스와 같이 데이터 출입이 빈번한 서비스에 적합
	: https://jibinary.tistory.com/150




Amazon EFS Elastic File System 
	: "리눅스" 인스턴스를 위한, "완전 관리형" 네트워크 파일 시스템
		: 리눅스 인스턴스 전용이라고, 윈도우 인스턴스 에는 사용 불가하고, 우분투도 연결이 가능하긴 한데 설정이 약간 복잡하다.
		: 완전 관리형 >>  사용자가 직접 관리할 필요없이, AWS 클라우드 서비스가 자동으로 모든 관리 작업을 처리해준다.
		: 구체적으론 다음을 관리해준다 
			1. 하드웨어 프로비저닝: 서비스가 필요로 하는 "전반적인" 하드웨어 자원을 할당. 마련.
				: 하드웨어 프로비저닝 vs 오토스케일링 
					하드웨어프로비저닝 >> 서비스의 초기 하드웨어 환경을 구축하는 과정
					오토스케일링 >> 하드웨어프로비저닝을 통해 구성된 환경을 동적으로 수정하는 과정
						: (아래에 적었지만) 오토스케일링은 유지관리에 해당
						

			2. 유지 관리: 하드웨어, 소프트웨어의 유지 관리 작업(예: 패치, 업그레이드 등)
				: 오토스케일링 기능이 여기에 해당

			3. 소프트웨어 구성: 파일 시스템의 구성, 설정, 최적화 등
			4. 모니터링: 자동 모니터링 해준다

	: EFS 와 인스턴스 >> 하나의 EFS에 여러 인스턴스가 동시에 마운트 및 사용 가능

	: EFS 와 가용영역 >> EFS 는 여러 가용영역에 걸쳐 사용 가능
		: EFS 는 동일한 리전 내의 모든 AZ 에서, 동시에 접근이 가능
		: 분산 파일 시스템이 필요한 경우 유용

	: NFS 표준 프로토콜 기반 연결 지원
		: 온프레미스 환경의 NAS 와 유사하게 활용 가능
			: ex) 사용자 홈 디렉터릴 공유하여 애플리케이션을 개발 가능
	: IOPS 가 높고 용량이 커서 처리량이 많고 대기시간 짧음
	: 오토스케일링 기능 있어 용량 부족 걱정 필요 없음
	
	: https://inpa.tistory.com/entry/AWS-%F0%9F%93%9A-EFS-%EA%B0%9C%EB%85%90-%EC%9B%90%EB%A6%AC-%EC%82%AC%EC%9A%A9-%EC%84%B8%ED%8C%85-%F0%9F%92%AF-%EC%A0%95%EB%A6%AC

--------------------------------------------------------------------------------------------------------------

5.4 Amazon S3


HTTP Hypertext Transfer Protocol :  인터넷상에서 데이터를 주고 받기 위한 서버/클라이언트 모델을 따르는 프로토콜
	: Connectless >> resposne을 받으면 연결을 끊어버린다 
	: Stateless >> 상태 유지 안한다


REST Representational State Transfer >> 자원을 이름으로 구분하여 해당 자원의 상태를 주고받는 모든 것. 그러니까 HTTP URI로 리소스를 명시하고, HTTP Method를 통해 해당 리소스에 대한 CRUD 을 적용하는 것
	REST API >> REST를 기반으로 만들어진 API
	RESTful >> REST 의 원리를 따르는 시스템.


고가용성 >> 거의 언제든지 사용 가능
내구성 >> 완전 튼튼.


Amazon S3 Simple Storage Service :  데이터를 버킷 내 객체로 저장하는 객체 스토리지 서비스.
	: S3 구성요소 
		: 객체 object >> S3 에 저장되는 데이터
			: 그러니까 일반적인 파일 시스템의 파일과 같은 기본 단위가 , S3 서비스에선 "객체"
			: 객체 구성 요소
			    : key 와 version ID 는 오브젝트 간 고유식별자가 된다. (딱 object ID 가 따로 있는게 아님). 그리고 이 식별자를 기반으로 접근하게 된다.
				: key >> 오브젝트의 이름
					: 일반적인 파일 시스템의 절대경로 개념.
					: 폴더 hierachy를 prefix 로 포함한다.

				: Version ID >> 버전 ID
					: 오브젝트를 버킷에 추가할 때 자동으로 생성되는 고유한 String 값이다.
					: 말 그대로, 동일한 오브젝트에 대해 버전을 구분하는데 쓰인다
					: 버전별 관리가 가능하다.

				: Value >> 실제 컨텐츠
				
				: Metadata >> name-value 형태의 부가정보 
					: 시스템 메타데이터 >> S3가 미리 정의한 메타데이터
						: ex ) Date , Content-Length

					: 사용자 정의 메타데이터 >> 사용자가 직접 정의한 메타데이터 

		: 버킷 bucket >> 객체 저장소. 데이터 스토리지를 위한 S3 의 기본 container . 
			: 그러니까 일반적인 파일 시스템의 폴더과 같은 기본 단위가 , S3 서비스에선 "버킷"
			: 객체는 반드시 버킷에 저장되어야됨
			: 생성된 후에는 버킷명과, 속한 리전을 변경 불가
			: S3 버킷 내에 있는 객체에 대해 여러 가용영역에 걸쳐 데이터를 복제해둬서 데이터 손실에 대비한다. >> 내구성. 고가용성
				: 기본적으로는 하나의 리전에 대해 3개 이상의 가용영역에 복제해둔다.
	
	: S3 스토리지 클래스 >> 그러니까 S3 스토리지 유형.
	    : 주로 액세스 빈도 고려하여 선택하는 듯.
		1. standard : 접근 빈도가 잦은 유형.
			: 가장 일반적인 유형으로, 사용한만큼 비용 지불.
			: 사용한만큼은 저장용량에 따른 비용 뿐 아니라, 데이터 검색/요청 등에 대한 비용도 말하는임. (요청이 들어오면 반환해주는것도 일이니까)
		2. intelligent-tiering : 자동으로 빈번한 접근 그룹과 간헐적 접근 그룹에 나누어 저장시킴
		3. infrequent access : 
			: infrequent access 를 줄여서 IA 로 표기하기도 한다
			(1) standard-infrequent access : 일반적인 방식으로 (최소 3개 이상의 가용영역에 데이터를 복제하여) 저장
			(2) one zone-infrequent access : 하나의 가용영역에만 데이터를 저장. 내구성이 낮다.

		4. S3 glacier : 아카이빙용 스토리지. 
			: 접근을 위해서라기보다는 백업용으로 보관하려는 경우 유용
			: 조회하는데 수분에서 수시간 걸림

		5. S3 glacier deep archive : 재사용이 거의 없는 데이터를 보관하는용
			: 젤 저렴하긴해도 조회하는데 수시간에서 수일이 걸릴수도 있다;;; 


	: Amazon S3 는 "웹 서버"를 제공한다 
		: 기본적으로 웹 접속이 가능하다 >> HTTP/HTTPS 프로토콜을 통해 클라이언트의 request 를 받고 이에 대한 response 를 할 수 있다
		: 자체적으로 정적 웹 콘텐츠를 반환할 수 있다
		:  WAS (Web Application Server) 까지 제공해주는건 아니라서, 동적 컨텐츠는 생성 못한다 

	: REST API 로 명령이 전달됨 ( http 메서드 기반 )
	: 내구성이 99.9999.. % . 그러니까 데이터 손실 ㅈㄴ 적다
	: 데이터 저장공간이 거의 무제한
	: S3 보안 >> 
		sol1. IAM 을 활용 <-- 뒷 챕터서 나오는 내용
			; IAM Identity and Access Management >> AWS 의 자격증명서비스
				: 주의 ) 인스턴스 생성할 때 설정하는 AMI Amazon Machine Image 용어랑 헷갈려하지 x
			: IAM 으로 접속 사용자, 데이터 접근을 관리 가능
		
		sol2. Amazon S3 버킷 정책 활용
 			: 버킷 내 모든 객체에 대한 권한 조정 가능
				: 일시적 권한 부여도 가능 ( presign ) 
			: S3 객체는 기본적으로 외부 사용자가 접근 불가하게 설계되어있음
				: 그러니까 루트 사용자와, 객체 소유자만 해당 객체에 접근 가능
				: 외부 사용자에 대한 접근을 허용하려면, Amazon S3 버킷 정책 가지곤 안되고, IAM을 활용해야됨.


	: https://m.blog.naver.com/techtrip/222101895713
	: https://velog.io/@ghldjfldj/AWS-S3%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80

--------------------------------------------------------------------------------------------------------------
