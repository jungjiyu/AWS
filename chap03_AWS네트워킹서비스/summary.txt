3.1 네트워크 기본 개념
 네트워킹 networking : 서로 연결한다 . 자원과 자원을 연결하여 통신하는 환경
 네트워킹 요소 :
	: OSI 7계층 모델 >> 네트워킹 통신 구조를 계층 7개로 분류하는 방식
		: 1계층 - 물리 계층 physical layer : 전기적, 기계적인 특성을 이용해서 통신 케이블로 데이터를 전송하는 계층(물리적 장비)
			: 단지 데이터를 전달"만" 하고 받으려는 데이터에 대한 에러에 대한 검사는 안함
			: *** 단위) 비트 단위(= 0 , 1 로 나타나진다 = 전기적으로 on off 다)
			:  통신케이블,리피터, 허브

		: 2계층 - 데이터링크 계층 data linklayer : 물리계층을 통해 송수신되는 데이터의 오류와 흐름을 관리하여 신뢰성 제공
			: 1계층이 물리적 계층이었다면 2계층은 논리적 계층
			:*** 단위 )프레임
				: 2 계층에서 데이터를 전달하는 단위를 걍 프레임이라 함
				: 프레임 단위로 MAC 주소를 부여하여 통신
					: MAC 주소를 사용하지만 ARP 가 2계층에 해당하지 않는 것은 ip 주소 정보가 없기 때문
			:  브릿지, 스위치, 이더넷,토큰링, MAC 등
 
		: 3계층 - 네트워크 계층 network layer :  라우팅 프로토콜을 이용해서 데이터를 목적지까지 최대한 안전하고 빠르게 전달하는 계층
			:  빠른 길을 찾는 개념
			:*** 단위) 패킷 packet 
				: 3계층에서 데이터를 전달하는 단위를 걍 패킷이라고 함
			: 라우터, IP , ICMP , ARP 등

		: 4계층 - 전송 계층 transport layer : 정보를 분할하고, 상대편에 도달하기 전에 다시 합치는 과정을 담당
				: 큰 통나무를 그냥 배송하면 통나무에 상처 너무 많이남(중간에 터널에 부딪히고 뭐하고). 차라리 일정하게 통나무를 잘라서 배송하고, 목적지 도달이전에 하나로 합침
				: port 번호와 전송방식(TCP || UDP) 결정 하여 TCP 헤더를 붙여서 두 지점간의 신뢰성 있는 데이터를 주고 받게 함
			: ***단위) 세그먼트
			: 게이트웨이, TCP, UDP 등 

		: 5계층 - 세션 계층 session layer: 세션을 생성 및 종료
			: 그러니까 다운로드 받던거 중지하고 끄고, 나중에 그거 다시 다운로드 받으면 이미 다운로드 받았던 부분까지는 빠르게 된다.
			: API, Sokcet, SSL , TSL 등

		: 6계층 - 표현 계층 presentaion layer : 전송하는 데이터의 표현 방식(데이터변환 압축 ,암호화등 인코딩 방식)을 결정
			: JPG , GIF, ASCII 등

		: 7계층 - 응용 계층 Application layer :  최종 목적지. 응용 프로세스와 직접 관계하여 일반적인 응용 서비스르 수행(explore, chrome)
			: 대표 프로토콜) HTTP , FTP, IMAP 등




IP Internet Protocol 주소 >> 인터넷상 IT 자원을 식별하는 고유한 주소
	구조 
		네트워크 ID >> 네트워크를 구분해주는 ID 
			: 네트워크가 같다 == 네트워크 대역대가 같다 == 네트워크 ID 가 같다
		호스트 ID >> 해당 네트워크에 속한 사용자에게 부여하는 고유의 번호
			: 조합 가능한 호스트 ID 개수 만큼 해당 네트워크에서 IP 생성 가능한 것 
				ex ) 호스트 ID 가 두 블럭 >> 2 ^ 16 즉 65536 개의 호스트 ID 를 가질 수 있으므로, 해당 대역에서 65536 개의 IP 생성 가능
	버전 
		: IPv4 >> 일반적으로 많이 씀
			: 4칸이 3개의 온점으로 구분되어 표현됨. 
				: 각 칸은 10진수 || 2진수로 표현됨
			: 가용범위가 부족한 것을 보완하고자 NAT, 서브넷팅 , private IP 등을 활용한다
		: IPv6
	
	분류
	    1. 통신 용도에 따른 분류
		(1) public 공인 IP >> 실제 인터넷 상에서 사용되는, 유일한 , ISP( Internet Service Provider ) 에서 제공하는 주소
		(2) private 사설 IP >> 인터넷이 아닌 독립된 네트워크 내부에서만 사용되는, 유일하진 않은, 네트워크 관리자가 제공하는 주소
			: 사설 IP 의 분류(클래스)와 범위
				:  tip 
				    : 젤 자주쓰는 192 번대 ~ 는 C클, 1바이트의 거의 끝인 ~126 은 A 클, 나머지는 B클이다
				    : 서브넷 마스크의 255 개수는 해당 클래스의 networkID 의 옥텟 갯수와 같음

				1. Class A >> 1~126까지 (= 첫 블락만 네트워크 ID부분 )  , 255.0.0.0(/8)
				2. Class B >> 128.0~191.255까지(= 앞 두블락만 네트워크 ID부분) ,255.255.0.0 (/16)
				3. Class C>> 192.0.0~223.255.255 까지(= 앞 세 블락이 네트워크 ID부분) , 255.255.255.0 (/24)
				
	    2. 할당 방식에 따른 분류
		(1) 고정 IP >> 네트워크 관리자가 수동으로 할당하는 방식
		(2) 유동 IP >> 특정 서버가 IP 주소 범위에 따라 동적 할당하는 방식
			: "DHCP Dynamic Host Configuration Protocol 을 통해 주소를 제공하는 서버" 와 "주소를 할당받는 클라이언트" 로 구성됨
			: IP 를 임대lease 하는 형태로 운영됨
		
				
				
DHCP Dynamic Host Configuration Protocol  >> 동적 호스트 구성 프로토콜. 호스트의 IP주소와 각종 TCP/IP 프로토콜의 기본 설정을 클라이언트에게 자동적으로 제공해주는 프로토콜
	: 기능 
		: 네트워크 안의 컴퓨터에 자동으로 네임 서버 주소, IP 주소, 게이트웨이 주소를 할당
		: 해당 클라이언트에게 일정 기간 임대해주는 동적 주소 할당

	: 네트워크에 사용되는 IP주소를 DHCP서버가 중앙집중식으로 관리하는 클라이언트/서버 모델을 사용
	: DHCP 의 구성
		1. DHCP 서버 >> 클라이언트에게 IP 할당 요청이 들어오면 일정한 범위의 IP 주소를 자동으로 할당해주는 서버.
			: DHCP 서버가 다운되면 IP 할당이 제대로 이뤄지지 않는다

		2. DHCP 클라이언트 >> 시스템이 시작하면 DHCP 서버에 IP 주소를 요청하는 쪽.
			: IP 주소를 부여받으면 TCP/IP 설정이 초기화되고 다른 호스트와 TCP/IP로 통신 가능해짐.
			: DHCP 클라이언트 를 단말 이라고도  한다

	: DHCP 프로토콜 원리
		: 임대 Lease>> DHCP 서버가 IP 주소를 영구적으로 단말에 할당하는 것이 아닌 , 특정 기간동안만 해당 IP를 임대 해주는 개념
			: DHCP 클라이언트가 임대 기간 이후에도 해당 IP 주소 사용을 원한다면 임대기간연장 IP Address Renewal 을 DHCP 에 요청 필요
			: DHCP 클라이언트가 해당 IP 주소가 더이상 필요하지 않다면 IP 주소 반납 절차 Ip address release 수행

	: IP 주소 할당 절차
		step1. DHCP Discover  >> 클라이언트가 DHCP 서버를 찾기 위한 "브로드캐스트" 메세지
			: 방향 >>클라이언트 -> DHCP 서버
 			: 주요 파라미터 >> Client MAC
			: 브로드캐스트 메세지 이기에 2개 이상의 DHCP 서버가 이에 대해 응답 가능

		step2. DHCP Offer >> 클라이언트를 감지한 DHCP 서버가 해당 DHCP 서버의 존재와 단말에 할당할 IP 주소 등 다양한 네트워크 정보를 담아 보내는 메세지
			: 방향 >>  DHCP 서버 -> 클라이언트
			: 주요 파라미터 >> 
				Client MAC: 클라이언트의 MAC 주소
				Your IP: 클라이언트에 할당(임대)할 IP 주소
				Subnet Mask (Option 1)
				Router (Option 3): 클라이언트의 Default Gateway IP 주소
				DNS (Option 6): DNS 서버 IP 주소
				IP Lease Time (Option 51): 클라이언트가 IP 주소를 사용(임대)할 수 있는 기간(시간)
				DHCP Server Identifier (Option 54): DHCP Offer를 보낸 DHCP 서버의 주소. 2개 이상의 DHCP 서버가 DHCP Offer를 보낼 수 있으므로 각 DHCP 서버는 자신의 IP 주소를 메세지에 포함

		step3. DHCP request : DHCP 서버의 존재와 제공받을 네트워크 정보를 수신받은 DHCP 클라이언트가 하나의 DHCP 서버를 선택하여 해당 서버에게 클라이언트가 사용할 네트워크 정보를 요청하는 메세지
			: 방향 >> 클라이언트 -> DHCP 서버
			: 주요 파라미터 >> 
				Client MAC 
				Requested IP Address ( 사용을 요청할 IP 주소 - DHCP Offer의 Your IP 주소 )
				DHCP Server Identifier ( 선택한 DHCP 서버의 IP 주소 )


		step4. DHCP ACK : DHCP 서버가 최종적으로 할당할 IP 주소 승인을 알리는 메세지
			: DHCP Ack를 수신한 클라이언트는 IP 주소를 포함한 네트워크 정보를 획득(임대)하게 되고, 인터넷 사용이 가능하게 됨
			: 방향 >> DHCP 서버 -> 클라이언트
			: 파라미터 >> DHCP Offer의 네트워크 정보와 동일
	:https://velog.io/@inhwa1025/DHCP%EB%9E%80-DHCP-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%98-%EC%9B%90%EB%A6%AC		


서브넷과 서브넷 마스크 >>host 필드 영역의 앞 비트 부분을 최대한 networkID 화 하여 hostID 영역을 줄여나간다
	: 서브넷 subnet >> 부분 네트워크. 하나의 네트워크를 분할하여 만들어진 네트워크 하나
		: IP 낭비를 줄이기 위해 도입된 개념( 실제로 조합 가능한 hostID 의 개수만큼 호스트 할당할 필요가 없을 때 사용)
		: 동일한 서브넷이란건 동일한 네트워크란 걸 의미. 네트워크 ID 부분인 같다

	: 서브넷 마스크 subnet mask >>  networkID 구하는데 사용되는 툴 같은것
		: IP 주소와 동일한 32비트 구조, 8비트 씩 4블럭 . 
			: ip와 다른점이 있다면 무조건 앞에서부터 쭉 1로 채워져야됨. 중간에 딴거 끼면 안되고. 0 한번이라도 나온 경우 그 뒤로 계속 0.
			ex ) 11111111.00000000.00000000.00000000 = 255.0.0.0
				11111111.11111111.11111111.10000000 = 255.255.255.128
		: 얼굴에 마스크를 쓰면 얼굴이 가려지는 것처럼, 서브넷에 마스크를 씌워 필요없는 IP 를 가린다는 의미로 마스크임
		: 사용 방법 >> IP 주소와 서브넷 마스크를 and 연산 시키면 , "네트워크 ID" 주소를 구할 수 있음. 

	: 서브넷팅 >> 하나의 네트워크를 여러개의 서브넷으로 분리하는 것
		: host 필드 영역의 앞 비트 부분을 최대한 networkID 화 하여 hostID 영역을 줄여나간다
			: 일단 network 필드는 못 건드리고 우리가 건드릴 수 있는 부분은 host 필드이다. 여기서 n 개의 비트를 networkID 화 하면 할당 가능한 네트워크 수는 2**n 개가 되고, 할당 가능한 호스트 수는 2**(8-n) 개가 된다(그러니까 2**(networkID 화 하고 나눈 비트 개수) ).
				: 실제로 할당 가능한 호스트 수는  2**(8-n) - 2 이다 << hostID 가 0 인거는 NetworkAddress 로, 255 인거는 Broadcast 로 고정되어있다 
 		: 결롡적으로는 서브넷 마스크 값이 커질수록 할당가능한 호스트 수는 줄어든다



CIDR Classless Inter-Domain Routing : 서브넷 마스크를 1의 갯수로 간략하게 표현하는 것. 서브넷 마스크의 표현 방법.
	:  IP 주소 뒤에 슬래시("/")와 숫자를 붙여 서브넷 마스크의 길이를 나타냄
		ex ) 192.168.0.0/24 >> 24비트의 서브넷 마스크를 사용하는 네트워크


라우팅과 라우터
	라우팅 routing >>네트워크 상에서 데이터를 보낼때 최적의 경로를 선택하는 과정
	라우터 router >> 라우팅 하는 장치. 
		: routing table 이라는 서브넷의 경로 리스트를 가지고 라우팅 하게 된다


TCP 와 UDP >> OSI 7 계층의 전송 계층의 대표 프로토콜들 . 데이터 전송을 담당
	TCP Transmission Control Protocol >> 1:1 통신 방식
		: 연결형 프로토콜 >> 연결이 성공해야 통신이 가능
		: 패킷이 제대로 도착했는지 확인한다
		: 신뢰성 높음 but 전송속도 느림
		: 속도보다 안정적인 데이터 전송이 필요할 때 사용

	UDP User Diagram Protocol >> n:n 통신 방식
		:  비연결  프로토콜 >> 데이터를 주고받을 때 연결 절차를 거치지 않고 발신자가 일방적으로 데이터를 발신하는 방식
		: 패킷이 제대로 도착했는지 확인 안한다
		: 신뢰성 낮음 but 전송속도 빠름
		: 데이터 유실에 큰 지장 없고 빠른 속도가 필요할 때 사용


	: TCP 와 UDP 를 사용하는 응용 서비스는 서로를 구분할 수 있도록 포트번호를 사용
		: IANA 라는 관리 기관서 정의
		: 포트 번호 범위
			well-known port : 0~1023
			registered port : 1024 ~ 1024~49151 
			dynamic port : 49152 ~ 65535



TCP/IP >>  프로토콜들의 모음집. Protocol Suite.
	: TCP , IP 자체와 관련있는게 아니라 OSI 7 레이어와 같이 네트워크를 이해하기 위한 모델이다.
		: 굳이 이 모델의 이름이 TCP/IP 인 것은 여러 프로토콜 중 TCP 와 IP 가 가장 많이 사용되기 때문.
		: 쩄뜬 작명센스가 ㅈㄴ 구리다는걸 새삼 다시 깨달음

	: 참고로 이 모델은 아레와 같은 4계층으로 이뤄진다
		1.Network Access Layer
		2.Internet Layer
		3.Transport Layer
		4.Application Layer

	: https://velog.io/@ksi05503/tcp-ip




ARP Address Resolution Protocol
	: IP 와 MAC 주소를 서로 매핑하는 절차. 그러니까 상대편의 MAC 어드레스를 알기 위해서 하는 동작.
		: 일반적으로 IP 주소만을 보기 때문에 IP 주소로만 통신을 생각하지만 IP 를 MAC 으로 바꾸는 절차를 거친다. 
		: IP == 논리적 주소, MAC == 물리적 주소

	: ARP 는 동일한 대역의 단말에 패킷을 보내기 위해 사용할 뿐 아니라, 다른 대역의 단말에 패킷을 보낼때도 (패킷을 보내는 단말이 속한 대역의) 게이트웨이의 MAC 주소를 알아내기 위해 사용한다.

	: 절차
		1. ARP 요청: "XXXX.XXXX.XXXX.XXXX의 MAC 주소가 무엇입니까?"라는 broadcast 메세지 보냄.  
		2. ARP 응답: 해당 IP 주소의 PC 가 자신의 MAC 주소를 포함한 응답을 해당 PC 에게 보냄.
		3. 패킷 전송 : 해당 MAC 주소를 패킷에 추가하여, 패킷을 전송.

---------------------------------------------------------------------------------------

3.2 AWS 네트워킹 

군집화 clustering >> 데이터의 특성을 분석하여 유사한 속성을 갖는 데이터끼리 하나의 군집 cluster 으로 묶는 작업

호스팅 hosting >> 서버에 배치된 리소스가 인터넷을 통해 접근 가능하게 되는 것
	: 호스팅 가능하다 == 요청을 통한 응답을 받을 수 있다

백본 네트워크 >> 대규모 데이터 전송을 지원하는 고속 네트워크 인프라로, 다양한 네트워크를 상호 연결하는 핵심 네트워크.
	: 쉽게 정리하면, 주요한 네트워크 경로.
	: 글로벌 인터넷 트래픽의 주요 경로를 형성. 
	: 참고로 backbone 영단어 자체는 등뼈. 척수.인데,  "백본" 네트워크라는건 그만큼 중추적인 역할이란 것.
	: 의미상 backbone == backbone network == backbone switch 
	: 주로 광섬유 케이블로 통신된다
	: https://josaboo.tistory.com/93



리전 , 가용영역 >> 특정 영역을 지칭하기 위해 AWS 에서 사용하는 용어
	: 우리나라에는 서울 리전과, 4개의 가용영역이 있다.
	: 서버 ⊂ 데이터 센터 ⊂ Availability Zone ⊂ Region
	: 가용영역 Availability Zone AZ>> 물리적 데이터 센터의 논리적 집합
		: 물리적 데이터 센터는 50000 ~ 80000 대의 물리적 서버가 존재
		: 쉽게 설명하자면, 애플리케이션이 한 곳에서 뻑나도 다른 곳에서 정상 운영되게 하기 위해 도입한 개념
			: 하나의 인스턴스에 장애가 발생하더라도, 복수의 AZ 에 걸쳐 인스턴스를 배포했다면,  다른 영역의 인스턴스가 요청을 이어받아 처리하게 할 수 있다.


		: 가용영역 ID . 가용영역 코드.
			: "리전-알파벳"꼴. 
				ex )  us-east-1 리전에서의 가용영역ID는 us-east-1a,  us-east-1b,  us-east-1c .... 

			: 모든 AWS 계정마다 동일한 ID 를 사용하지만, 가용영역ID는 무작위로 실제 리소스와 맵핑되기 떄문에, 동일한 ID 라고 해서 같은 리소스를 나타내지 않는다. 
			    : 이는 보안 및 트래픽 몰림 방지 목적.
				ex ) 사용자A , 사용자B가 us-east-1a 라는 같은 가용영역ID를 가진다해도 해당 가용영역ID 는 다른 물리적 리소스를 의미할 수도 있다.
			: https://docs.aws.amazon.com/ko_kr/ram/latest/userguide/working-with-az-ids.html



	: 트랜짓센터 transit center >> 리전 내부 네트워크를 외부 네트워크와 연결하는 중간 허브 역할.
		: 리전 내부의 가용영역이 트랜짓 센터를 통해, 외부 인터넷과 통신 가능하게 된다. 

	: 리전 Region >> 전 세계 주요 도시의 데이터 센터를 clustering 하는 물리적 위치.
		:  AWS 서비스가 요청되고 그에 따른 응답을 받을 수 있는 지리적 위치를 기준으로 구분한(= AWS가 호스팅 되는 지리적 위치를 기준으로 구분한) 단위로, 2개 이상의 가용영역으로 구성된다.
		: 쉽게 설명하자면,  클라이언트와 가까운 곳에서 클라우드 서비스를 제공하기 위해 도입된 개념
		: 리전 내부의 네트워크 환경 >> "트랜짓 센터"와 "가용영역"이 서로 연결되어 네트워크 환경을 이룸
			: 분류 >> 네트워킹 측면으로 어떤 대상과 연결되었느냐를 기준으로 
				1. Intra-AZ 연결 : 같은 가용영역 내의 리소스 간 네트워크 연결
					: 같은 가용영역에 존재하는 데이터 센터들은 고밀도 광섬유 케이블로 상호 연결되어 네트워킹 환경을 구성함

				2. Inter-AZ 연결 : 서로 다른 가용영역에 위치한 리소스 간 네트워크 연결
					: 같은 리전에 존재하는 가용영역이라도, 서로 물리적으로 멀리 떨어져있다. but 전용선으로 논리적 연결되있어 빠른 속도로 통신 가능하다.
						: 물리적으로 떨어져있는건 천재지변, 테러등에 대비 목적.

				3. transit center 연결 : 리전의 가용영역에서 외부 인터넷과 통신이 필요할 때, 트랜짓 센터를 통해 통신하게 되는 것. 

				
 		: 각 리전은 독립적이다. 
			: 특정 리전에선 원하는 AWS 서비스가 아직 준비되지 않은 경우도 있고, 리전 별로 가격이 상이한 경우도 있다.
			: seoul 리전에서 생성한 AWS 자원은 seoul 리전에만 국한되고, 다른 리전에는 해당 자원이 존재하지 않는다. 
			: 대부분의 서비스가 리전별로 독립적으로 관리되기 떄문에, 서비스를 이용할 때 어느 리전에서 사용할 지 미리 계획해야됨

 



엣지 POP edge Point Of Presence : 글로벌 서비스 콘텐츠를 제공하는 센터
	: 교재에서는 편의상 "엣지 팝"이라고 부르는 것 같은데 구글링 해보면 보통 "엣지"라고만 하거나 "POP(Point of presence)"하나로만 부름. 둘이 합쳐서는 잘 안부름
	: 보통 CDN 서비스를 제공하기 위해 만들어진다
		: CDN(Contents Delivery Network) 서비스 >> 콘텐츠를 보다 빠르게 전송하는 기술로, 속도 개선과 회선 비용 절감에 용이
			: 최초 요청 시에는 서버로부터 콘텐츠를 가져와 고객에게 전송하며, 동시에 CDN 캐싱장비에 저장한다.이후에는 CDN 캐싱 장비에 저장된 콘텐츠를 바로 전송하는 방식이다. CDN 업체에서 지정하는 컨텐츠 만료 지점까지 호출이 없으면 주기적으로 삭제한다.

	: 구성 
		1. 엣지 로케이션 edge location : 여러 서비스들을 가장 빠른 속도로 제공(캐싱) 하기 위한 거점
			: 보다 정확히 말하자면 리전과 가용영역과 별개로 AWS의 CDN 서비스인 CloudFront과 AWS의 DNS 서비스인 Route53의 캐시 서버

		2. 리전별 엣지 캐시 regional edge cache :  CloudFront의 오리진 서버(CDN)와 에지 로케이션 사이에 위치
			: 서비스를 이용하려고 할때, 엣지 로케이션에 컨텐츠가 없는 경우 리전별 엣지 캐시에서 검색 시도. 결국 CDN 서비스의 엣지 로케이션이랑 비슷한 개념이라 적당히 이해

	: AWS 리전 내의 AZ 와 엣지 POP 의 연결 방식 
		: 일반적인 서비스 >> 가용영역은 트랜짓 센터를 통해 인터넷 구간과 연결되어 통신
		: 엣지 POP 을 활용한 서비스 >>가용영역은 트랜짓 센터를 통해 AWS 백본 네트워크와 연결됨.  AWS 백본 네트워크는 엣지 POP 과 연결되어 데이터를 고속 전송함. 엣지 POP 이 최종적으로 AWS 글로벌 네트워크를 통해 사용자에게 데이터를 제공

	: AWS 글로벌 네트워크, AWS 백본 네트워크 , 엣지 POP >> AWS의 전 세계적인 인프라를 구성하는 중요한 요소
		: AWS 글로벌 네트워크 >>AWS의 모든 리전, 가용 영역, 엣지 POP를 연결하는 전 세계적인 네트워크 인프라
		: AWS 백본 네트워크>> AWS 글로벌 네트워크의 주요 고속, 고용량 네트워크 인프라
		: 엣지 POP >> 빠른 글로벌 서비스 제공 위한 데이터 센터

	: Amazon CloudFront , Amazon Route 53 , AWS Shield , AWS Global Accelerator

	: https://inpa.tistory.com/entry/AWS-%F0%9F%93%9A-%EC%95%84%EB%A7%88%EC%A1%B4-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%EC%A1%B0-Region-AZ-Edge-Location-Cache-%EC%99%84%EB%B2%BD-%EC%A0%95%EB%A6%AC#%EB%A6%AC%EC%A0%84_%EC%97%A3%EC%A7%80_%EC%BA%90%EC%8B%9C_regional_edge_cache



대표적인 AWS 네트워킹 서비스 
    : 네트워크 기반
	: VPC >> 사용자 전용 가상의 프라이빗 클라우드 네트워크 
	: Transit Gateway >> 중앙허브 개념처럼, VPC 와 온프레미스 네트워크를 연결하는 단일 게이트웨이
    : 엣지 네트워킹
	: Route53 >> 확장 가능한 관리형 DNS 서비스
		: 도메인 등록, 라우팅, 상태 확인 등의 서비스 제공
	: Global Accelator >> AWS 글로벌 네트워크를 활용한 애플리케이션 가용성 및 성능 개선
    : 하이브리드 연결
	: Direct Connect >> 온프레미스 환경과 연결하는 AWS 전용 네트워크 
 	: Site-to-Site Connect >> 온프레미스 환경과 연결하는 암호화된 네트워크 


---------------------------------------------------------------------------------------

3.3 Amazon VPC 


대역폭>> 초당 처리할 수 있는 데이터의 양

라우터와 게이트웨이 >> 라우터 != 게이트웨이
	: 둘이 많이 헷갈려하는 이유 >> 라우터로 대표적인 공유기만 해도, 그냥 기기가 아닌 라우팅 + NAT + 게이트웨이 ... 기능이 포함된 복합 통신 기기. 보통 같이 딸려 제공 되는 경우가 다수여서 동일시 하는 경우가 있는 듯

	: 라우터 >> "같은 프로토콜"을 사용하는 네트워크 간의 데이터 송수신을 수행하는 "하드웨어적"인 것
		: 주로 LAN 과 WAN(OSI 3계층)을 연결하는데 사용
		: 프로토콜이 다르다 >>  로컬 네트워크의 통신 프로토콜과 인터넷의 통신 프로토콜이 다르다

	: 게이트웨이 >> "서로 다른 프로토콜"을 사용하는 두 네트워크 간 데이터를 송수신 가능하게(== 변환) 하는 "소프트웨어"적인 것.
		: 주로 프로토콜이 다른 네트워크(OSI 4계층)를 연결하는데 사용
			: 얘가 다른 네트워크와의 통신을 가능하게 해주는 얘임
			: 네트워크에서 다른 네트워크로 가는 입구라고 보면 됨.

	: 라우터와 게이트웨이 차이 >>
		: 쉽게 풀어놓은 >> https://blog.naver.com/the-woman/223404957249
		: 간략한 >> https://puzzle-puzzle.tistory.com/entry/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%9A%A9%EC%96%B4-%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4-Gateway-%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4%EC%99%80-%EB%9D%BC%EC%9A%B0%ED%84%B0-%EC%B0%A8%EC%9D%B4%EC%A0%90

	: 둘이 많이 헷갈리는 이유 >> https://m.blog.naver.com/kangyh5/223175392071


Amazon VPC Virtual Private Cloud  >> 사용자 정의로 구성된 가상의 프라이빗 클라우드 네트워트 
	: 자신만의 데이터 센터에서 네트워크 환경을 구성하는 것처럼, 클라우드 네트워크를 구성 가능
	: 리전
		: 하나의 리전에 여러개의 VPC 생성 가능
		: VPC는 리전 별로 독립적이고, 각 VPC 자체로도 서로 독립적
			ex ) 서울 리전에서 생성한 VPC 는 서울 리전에만 있음
			ex ) 서울 리전의 VPC A 와 VPC B는 서로 독립적이다
		: (독립적이라곤 하지만) 필요에 따라 VPC 들을 서로 연결하여 네트워크 확장 가능

	: 서브넷 . 가용영역.  IP CIDR
		: Amazon VPC 도, 하나의 네트워크로써 서브넷으로, 분리된 네트워크로 구성할 수 있다. 
		: 서브넷은 반드시 하나의 가용영역에 종속적으로 위치
			: 그러니까 서브넷이 여러 가용영역에 걸쳐 있을 수 없단 말
			: 그러니까 각 서브넷은 특정 가용영역 내에 위치하여 그 영역의 자원만을 사용하고, 다른 가용영역의 자원과는 독립적으로 동작한다는 것 >> 고가용성과 내결함성 제공
				: 내결함성 Fault Tolerance >> 시스템이 일시적인 장애나 오류를 감지하고 복구할 수 있는 능력을 가지는 것
				: 고가용성 High Availability >> 사용자가 언제든지 시스템에 접근할 수 있도록 보장하는 것
		: 각각 다른 가용영역에 속한 서브넷을 하나의 VPC가 가지게 할 수 있다
			: 그러니까 하나의 VPC 는 특정 가용영역에 종속적이지 않다. 여러 가용영역에 걸쳐 존재할 수 있다

		: 서브넷의 종류 << 해당 서브넷이 (VPC) 외부와도 소통을 할 수 있는 지의 여부
			1. 퍼블릿 서브넷 >> (인터넷 구간과 연결이 되있어) 외부 인터넷과 통신이 가능한 네트워크 영역.
				: 해당 서브넷이 속한 VPC 의 게이트웨이를 통해 외부와 통신하게 된다

			2. 프라이빗 서브넷 >> 인터넷 구간과 연결이되지 않은 폐쇄적인 네트워크 영역.


		: 서브넷팅을 하기 위해, CIDR 표기법을 사용
			: VPC 에 특정 범위의 IP 가, CIDR 표기법을 통해 할당됨
			: VPC 내부의 각 서브넷에 특정 범위의 IP가 , 마찬가지로 CIDR 표기법을 통해 할당되는데, VPC 에 할당된 IP 범위를 n빵 하는 꼴임
			:  각 서브넷 내부의 자원에 (범위를 만족하는) 특정 IP 가 할당됨.
				: 자원에는 IP 범위가 아닌 특정 IP 가 할당되는거다

	: inbound 와 outbound 
		: inbound >> 인스턴스로 외부에서 들어오는 과정. 인스턴스<- 인터넷 방향 통신
		: outbound >> 인스턴스에서 외부로 나가는 과정. 인스턴스-> 인터넷 방향 통신




	: 가상 라우터
		: Amazon VPC 를 생성하면 기본적으로 가상 라우터가 생성됨
		: 라우팅 테이블
			: 가상 라우터는 기본적으로 기본 라우팅 테이블을 보유
			: 별도의 라우팅 테이블도 생성 가능
			: 라우팅 테이블을 서브넷과 attach( 연결 )하여 서브넷마다 라우팅 테이블을 가지게할 수도 있음
				: 서브넷마다 라우팅 테이블을 두어 별도로 관리할 때의 장점 >> 서브넷 별(=대역 별)로 다른 보안 요구 사항과 네트워크 경로를 적용가능
					; 라우팅 테이블의 경우 column 으로 "목적지 대상"과 "타깃 대상"이 있는데, 타깃 대상으로 뭘 선택하느내 따라 보안을 다르게 할 수 있다 
						: 타깃 대상 
							0. 로컬  > VPC 내부 간 통신
							1. 인터넷 게이트웨이 > 외부와 양방향 접근 허용. 
							2. NAT 게이트웨이 > 외부와 단방향 접근 허용.
					: https://martinkim1954.tistory.com/entry/AWS-%EB%9D%BC%EC%9A%B0%ED%8C%85%ED%85%8C%EC%9D%B4%EB%B8%94Route-Table-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EB%9D%BC%EC%9A%B0%ED%8C%85


	: 보안 그룹, 네트워크 ACL >> 가상의 방화벽(firewall) 기능 
		: 서브넷과 생성된 자원에 대해 트래픽 접근을 통제하는 것이 주된 목적
		: 보안 규칙 >>IP CIDR 블록, 프로토콜, 포트 번호 등을 정의해 트래픽의 allow || deny 를 결정
			:  방향성이 있다 ( inbound , outbound )

		: security group 과 ACL 차이점 >> 
			: 보안 그룹 security group >> 
				1. 접근 제어 대상 : 인스턴스와 같은 자원 접근을 제어
				2. stateful 접근 통제 : 이전 상태 정보를 기억하고, 다음에 그 상태를 활용
					: 이전 상태 정보를 기억 한다는 것 == 인바운드 규칙에 따라 트래픽을 허용했었던 경우, 해당 정보를 기억하고 아웃바운드 규칙에 상관없이 자동으로 트래픽을 허용한다
						: 그러니까 인스턴스 내부로까지 접근을 허용했던 녀석인데 굳이 나가는 것 까지 체크해야돼? 느낌.
				3. 허용 규칙 만 존재. 
					: 허용 규칙에 해당되지 않으면 자동으로 거부됨.(거부 규칙 간주)

			: 네트워크 ACL Access Control List >> 
				1. 접근 제어 대상 : 서브넷 접근 제어. 그러니까 네트워크 접근 제어
				2. stateless 접근 통제 : 이전 상태를 기억하지 않고 그를 활용하지 않음
					: 이전 상태 정보를 기억 하지 않는다는 것 == 인바운드 규칙에 따라 트래픽을 허용했었더라도, 아웃바운드 규칙으로 트래픽 허용 여부를 판단한다.
				3. 허용 규칙, 거부 규칙 각각 존재. 규칙을 순차적으로 확인하고 허용과 거부를 판단				
					: 네트워크 ACL 에 정의한 "모든" 규칙이 매칭 되지 않으면 기본적으로 거부됨


	: Amazon VPC 와 다른 네트워크 간의 통신
		: Amazon VPC 는 "프라이빗 네트워크"로, 기본적으로 외부 인터넷 구간과 연결되지 않은 독립적인 네트워크. >> 외부 네트워크와의 통신을 위해선 별도의 자원 필요
		: (외부 네트워크와의 통신을 가능하게 하는) 네크워킹 자원 
			: how to use >> 
				1. 네트워킹 자원 생성
				2. 생성한 네트워킹 자원을 Amazon VPC 에 연결. attach.
				3. 특정 Amazon VPC 내의 특정 public subnet 의 해당 라우팅 테이블의 타겟 대상을 attach 한 네트워키킹 자원으로 함 >>  외부 인터넷 구간과 해당 public subnet 이 통신 가능하게 된다
			: 종류
				1.internet gateway>> VPC 와 인터넷 구간의 논리적 연결. 인터넷으로 나가는 관문
					: 퍼블릭 서브넷이 됬건 프라이빗 서브넷이 됬건, 실질적으로 외부 인터넷과 통신 가능하게 하는 것은 인터넷 게이트웨이.
					: 인터넷 게이트웨이의 경우 퍼블릭 서브넷만 직방으로 사용 가능.
						: 퍼블릭 서브넷은 그 자체로도 퍼블릭 IP를 가지고 있어서 가능한 것. 
							: 반면에 프라이빗 서브넷은 그 자체로는 퍼블릭 IP 를 가지고 있지 않아 별도로 NAT 게이트 웨이를 거친 후에야, Internet gateway 를 통해 외부로 나갈 수 있다.
					; 양방향 (인바운드 , 아웃바운드 모두 허용)
 
				2. NAT gateway Network Address Translation gateway >> NAT 기능(private IP 주소를 public IP 로 변환하는 기능)을 제공하는 게이트웨이.
					: private subnet 에서 외부 인터넷으로 통신하는 관문.
						: 그렇다고 private subnet 이면 NAT gateway 만 있음 통신 가능하단게 아니라, NAT gateway 를 거친 후에 별도로 Internet Gateway 를 거쳐야됨. 
						; private subnet 은 외부 인터넷 구간과 단절된. 독립된. 네트워크라곤 하지만, 실제로 완전히 단절된건 아니고,  NAT 게이트웨이트를 통해 프라이빗 IP 주소를 퍼블릭 IP 주소로 변환한후, 인터넷 게이트웨이를 통하여 외부 인터넷 구간과 통신 가능하다.
					: NAT 게이트웨이는, (실제 인터넷 게이트웨이와 연결된) 퍼블릭 서브넷에 위치함. 
					; 단방향(아웃바운드만 OK, 인바운드는 NO. )
						: 외부 인터넷 구간에서 프라이빗 서브넷의 IP 주소로는 데이터를 송수신 불가 << 그럼 포트포워딩 하면 되지 않나??
		
					: https://velog.io/@happyyeon/AWS-VPC-NAT%EC%9D%B8%ED%84%B0%EB%84%B7-%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4

				3. VPC 피어링 Peering  : 서로 다른 "VPC" 를 , 1 대1로 연결하는 기능. 
					: 다른 리전, 다른 계정 에 위치한 VPC 와도 연결 가능
					: 주의 >>
						1. 1 대 1 연결만 지원. 
							: 물론 다른 VPC 와 간접적으로 연결되게 할 수 있지만, 직접적으로 여러개 연결시키진 못함.
						2. VPC 피어링으로 연결할 경우 IP CIDR 블록이 중복되면 연결 불가능하므로, VPC 피어링으로 네트워크 확장 시 IP 주소 대역 반드시 점검할 것.


				4. 전송 게이트웨이 transit gateway : 다수의 VPC ,온프레미스, VPN 등을 중앙집중식으로 관리 가능한 네트워크 허브
					: 수백 개의 VPC와 연결할 수 있어, 대규모 네트워크 인프라에 적합
					: 작동 방식
						: VPC 통신>> transit gateway 에 연결만 해주면, 해당 transit gateway 에 연결된 모든 다른 VPC 와 통신이 가능
						: 온프레미스 통신 >> 
							1. site-to-site VPN 사용 : IPSec 암호화 프로토콜을 사용해 AWS Cloud 환경과 On-Premise 환경을 연결해주는 서비스
							    : AWS에는 transit Gateway 가 , On-Premise에는 CGW가 붙어있고 둘 사이에 IPsec 프로토콜을 이용해 상호간 통신이 가능하게만들어 주는 원리 
								step1. CGW 생성 : 온프레미스 라우터의 공인 IP 주소를 사용하여 생성
									: CGW Customer Gateway 고객 게이트웨이 >> On-Premise의 라우터 값을 AWS에 제공해주는 서비스. AWS 에서 구성되는 가상의 게이트웨이
										: 온프래미스 내부적으로 이를 활용하기 위해선 별도의 VPN 을 준비해둬야됨. VPN 협상은 항상 고객 게이트웨이 디바이스(클라이언트 측)에서 연결을 시도해야 한다.

								step2. VPN gateway 생성 : AWS에서 VPN 게이트웨이를 생성
									: VPN Virtual Private Network 가상 사설망 >>공용 네트워크를 통해 프라이빗 네트워크에 안전하게 접근할 수 있도록 하는 기술
										: 원격 접근, 지리적 차단 우회, 공용 네트워크 사용 시 보안을 강화하는 등의 목적으로 사용

								step3. 생성한 VPN gateway 를 transit Gateway 에 연결

								step4. 생성한 VPN gateway 와 CGW 간의 VPN 연결 설정

								step5. Transit Gateway의 라우팅 테이블을 업데이트하여 온프레미스 네트워크와 VPC 간의 트래픽을 올바르게 라우팅




								: https://velog.io/@rhgkssk1114/Site-to-Site-VPN-%EC%9D%B4%EB%9E%80


							2. AWS Direct Connect 사용


Amazon VPC 요금 >> 기본적으로 Amazon VPC 사용 요금은 발생 안함 , but 일부 기능 대해 요금 발생
	: 그 일부 기능 >> NAT 게이트웨이
		: 최초 프로비저닝한 후 "시간"에 따른 요금, 기가 바이트 단위로 데이터 처리 요금이 부과됨
			: 사용 시간이 1시간 미만이더라도, 1시간으로 청구된다
		: 참고 ) 서울 리전의 NAT 게이트웨이는 1시간 당 100원 미만의 요금 발생 가능



---------------------------------------------------------------------------------------

3.4 Amazon VPC 실습
	- 퍼블릭 서브넷 환경과 프라이빗 서브넷 환경 구성 및 통신을 확인


0.0.0.0/0 >> 모든 IP
	:  IPv4 패킷을 전송하려는 컴퓨터가 자신의 IP주소를 모르는 경우, 통신하기 위해 사용
	: https://inpa.tistory.com/entry/WEB-%F0%9F%8C%90-00000-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80




실습 단계
	1. custom VPC 생성
		: Amazon VPC 는 생성 주체에 따라 2가지로 구분 
			(1) default VPC  기본 VPC >> 리전마다 하나씩 있고, AWS 네트워킹 리소스가 미리 생성되어있음.
			(2) custom VPC 사용자 정의 VPC >> 사용자가 수동으로 정의하는 VPC. 리전별로 최대 5개까지 생성 가능.
				: 다음을 정의 << 사용자 정의라고 해서 생각보다 뭐 정의하고 그런게 많진 않다
					1. 이름 태그 
						: 이름과 태그를 , 중간에 - 를 기준으로 구분해 입력함
						: 실습에서는 CH3-VPC 로 함

					2. IPv4 CIDR 
						: 실습에서는 수동으로 입력, 10.3.0.0/16으로 함
				
				: custom VPC 의 세부 정보
					VPC ID : VPC의 고유 ID. 자동생성됨
						: 이를 앞서 설정한 이름 태그로 대신 할 수 있다. (아무래도 길고 복잡하니까)
					상태 : 
						Avaliable >> 사용 가능한 상태
					IPv4 CIDR : VPC 에서 사용하는 IP 대역
						: custom VPC 생성할 떄 설정했던 IPv4 임
					기본 라우팅 테이블 : VPC 에서 사용하는 기본 라우팅 테이블 
					기본 네트워크 ACL  : VPC 네트워크 보안 정책 
					기본 VPC 여부 : default VPC 가 아닌 custom VPC 이므로, '아니요' 라고 표시됨
					

		: 네트워크 ACL 의 인바운드/아웃바운드 규칙 >> 순차적으로 확인 및 적용됨.
			

		: 절차
			step1. 서비스-네트워킹 및 콘텐츠 전송-VPC 택  >> VPC 대시보드 확인 가능
				: 가운데선 리전마다 생성된 VPC 리소스 확인 가능
					: 리전 별 VPC 보면 내가 아무짓 안해도 1개정도씩 있는 것 볼 수 있는데, 이게 default VPC 임 

			step2. VPC 생성 버튼 누르고, 정의 ( 이름 태그, IPv4 CIDR 위에 적은대로)하여, 생성
				: step3 와 step4 에서 확인하게 되겠지만, custom VPC 생성만 해도 라우팅 테이블과 보안 규칙 등의 네트워킹 자원이 자동 생성됨. (물론 편집 가능)
					: 로컬 통신은 가능한 상태.

			step3. 옆의 메뉴바-vpc 눌러서 생성한 custom vpc 정보 확인
				: 생성한 custom vpc  클릭하면 나오는 "리소스 맵" 탭에서, 생성되있는 라우팅 테이블 택하여 클릭 
				: 보면 아무짓도 안했는데 라우팅 테이블 란에 라우팅 테이블이 하나 만들어져 있음. 이게 기본 라우팅 테이블로, 기본적으로 생성되는 거임
				: 라우팅 테이블이 존재하는 것으로 거꾸로 가상 라우터가 존재함을 유추 가능
				: 쨌뜬 자세히 확인해보면, 해당 라우팅 테이블에는 하나의 row 가 기입되어있음 : 대상(Destination) - VPC생성당시설정했던IPv4 CIDR, 대상(Target) - local , 상태 status-active

			step4. 옆의 메뉴바-네트워크ACL 눌러서 ACL 대시보드 
				: 인바운드 규칙 탭, 아웃바운드 규칙 클릭 >> 아무짓 안했는데도 기본적으로 규칙이 생성되있음
					: 0.0.0.0/0 (모든 IP범위) 를 allow 하는게 맨 첫줄 , 0.0.0.0/0 (모든 IP범위) 를 deny 하는게 맨 끝 줄



	2. 퍼블릭 서브넷 생성
		: 서브넷 >> 분리된 네트워크. 
			: VPC 의 IP CIDR 에서 분할된 IP CIDR.
			: 하나의 가용영역에 종속됨
			: 서브넷 생성시 다음을 정의 필요
				(1) VPC ID : 서브넷이 속하게될 VPC의 ID
					: 실습에서는 앞서 생성했던 custom VPC
				(2) 서브넷 이름 
					: 실습에서는 'CH3-Public-Subnet'으로 함
				(3) 가용 영역
					: 실습에서는 '아시아 태평양(서울)/ ap-northeast-2a'
				(4) IPv4 CIDR 블록 : 해당 서브넷에 할당할 IP 범위
					: 실습에서는 '10.3.1.0/24'

			: 서브넷 생성 시 표시되는 대표 세부 정보
				(1) IPv4 CIDR : 서브넷에 할당된 IP 대역
				(2) 가용영역 : 서브넷이 위치한 가용영역
				(3) VPC : 서브넷이 속한 VPC 정보
				(4) 라우팅 테이블 : 서브넷이 사용하는 라우팅 테이블 

		: 서브넷과 라우팅 테이블 >>
			: 서브넷 마다 라우팅 테이블 생성 시 다음을 정의 필요
				(1) 라우팅 테이블 이름
					: 실습에선 'CH3-Public-RT' 
				(2) VPC : 해당 라우팅 테이블이 속할 VPC 
					: 실습에서 생성했던 custom VPC

			: 서브넷 마다 라우팅 테이블 생성 후, 별도로 연결 작업 해줘야됨. 
				: 이건 라우팅 테이블  생성당시 같이 정의 못함


		: 서브넷과 인터넷 게이트웨이
			: 인터넷 게이트웨이를 생성하기 위해 다음을 정의 필요
				(1) 이름 태그
					: 실습에선 CH-IGW 로 함

			: 인터넷 게이트웨이 생성 이후 별도로 VPC 와 연결 작업 필요
				: 이건 게이트웨이 생성당시 같이 정의 못함

	
		: 절차
			step1. 옆의 메뉴바-서브넷 선택
				: 기본적으로 4개의 서브넷이 자동 생성되어있는데, 이건 기본 VPC 로 생성된 서브넷들임.

			step2. 서브넷 생성 버튼 누르고, 설정 후 , 서브넷 생성
				: 위에 적은 대로

			step3. 생성한 서브넷 클릭해 세부 정보 확인

			step4. 해당 서브넷의 라우팅 테이블 생성하기 
				step (1) 옆의 메뉴바 - 라우팅 테이블 - 라우팅 테이블 생성 버튼 클릭
				step (2) 위에 적은 대로 정의 후 생성 

			step5. 생성한 라우팅 테이블 세부 정보 확인
				: 라우팅 테이블을 생성한다고 해서 자동으로 서브넷과 연결시켜주진 않고, 덩그러니 있다. >> 개발자가 별도로 서브넷과 연결해줘야된다.
					: 생각해보면 라우팅 테이블 생성할 당시 VPC 까지만 입력했지, 서브넷 정보를 입력하는 절차는 없었다.

			step6. 라우팅 테이블을 서브넷과 연결 
				step (1) 해당 라우팅 테이블 클릭 후 - 서브넷 연결 탭 - 서브넷 연결 편집 버튼 : 새로 생성한 서브넷 체크 후 연결 저장 버튼 누름
				step (2) 다시 라우팅 테이블 확인해 보면 제대로 연결되어있음



			step7. 인터넷 게이트웨이 생성
				step (1) 옆의 메뉴바 - 인터넷 게이트웨이 - 인터넷 게이트웨이 생성 버튼 클릭
				step (2) 위에 적은 대로 정의 후 생성

			step8. 생성한 인터넷 게이트웨이 세부 정보 확인
				: 생성한 직후에는 Detached (분리) 로 뜬다. 즉 VPC 와 연결되지 않은 상태.
				: 인터넷 게이트웨이를 생성한다고 해서 자동으로 VPC 와 연결시켜주진 않고, 덩그러니 있다 >> 별도로 VPC 와 연결해줘야된다. 
					: 셍각해보면 internet gateway 생성 당시 서브넷은 커녕 VPC 조차도 입력 안했었다


			step9. 인터넷 게이트 웨이를 VPC 에 연결 
				step (1) 상세 정보 페이지의 "인터넷 게이트웨이 생성 버튼" 옆의 "작업" 드롭박스를 클릭하여 VPC 연결을 택
				step (2) custom VPC 를 선택한 후 , 인터넷 게이트웨이 연결 버튼 클릭
				step (3) 확인해보면 상태 정보가 Detached 에서 Attached 로 변경되어있음




			step9. 라우팅 테이블 편집




	3. 퍼블릭 서브넷 환경에서 통신을 확인
	4. 프라이빗 서브넷 생성
	5. 프라이빗 서브넷 환경에서 통신을 확인
	6. 실습을 위해 생성된 자원을 모두 삭제







		


	





		 
		3.1 네트워크 기본 개념
 네트워킹 networking : 서로 연결한다 . 자원과 자원을 연결하여 통신하는 환경
 네트워킹 요소 :
	: OSI 7계층 모델 >> 네트워킹 통신 구조를 계층 7개로 분류하는 방식
		: 1계층 - 물리 계층 physical layer : 전기적, 기계적인 특성을 이용해서 통신 케이블로 데이터를 전송하는 계층(물리적 장비)
			: 단지 데이터를 전달"만" 하고 받으려는 데이터에 대한 에러에 대한 검사는 안함
			: *** 단위) 비트 단위(= 0 , 1 로 나타나진다 = 전기적으로 on off 다)
			:  통신케이블,리피터, 허브

		: 2계층 - 데이터링크 계층 data linklayer : 물리계층을 통해 송수신되는 데이터의 오류와 흐름을 관리하여 신뢰성 제공
			: 1계층이 물리적 계층이었다면 2계층은 논리적 계층
			:*** 단위 )프레임
				: 2 계층에서 데이터를 전달하는 단위를 걍 프레임이라 함
				: 프레임 단위로 MAC 주소를 부여하여 통신
					: MAC 주소를 사용하지만 ARP 가 2계층에 해당하지 않는 것은 ip 주소 정보가 없기 때문
			:  브릿지, 스위치, 이더넷,토큰링, MAC 등
 
		: 3계층 - 네트워크 계층 network layer :  라우팅 프로토콜을 이용해서 데이터를 목적지까지 최대한 안전하고 빠르게 전달하는 계층
			:  빠른 길을 찾는 개념
			:*** 단위) 패킷 packet 
				: 3계층에서 데이터를 전달하는 단위를 걍 패킷이라고 함
			: 라우터, IP , ICMP , ARP 등

		: 4계층 - 전송 계층 transport layer : 정보를 분할하고, 상대편에 도달하기 전에 다시 합치는 과정을 담당
				: 큰 통나무를 그냥 배송하면 통나무에 상처 너무 많이남(중간에 터널에 부딪히고 뭐하고). 차라리 일정하게 통나무를 잘라서 배송하고, 목적지 도달이전에 하나로 합침
				: port 번호와 전송방식(TCP || UDP) 결정 하여 TCP 헤더를 붙여서 두 지점간의 신뢰성 있는 데이터를 주고 받게 함
			: ***단위) 세그먼트
			: 게이트웨이, TCP, UDP 등 

		: 5계층 - 세션 계층 session layer: 세션을 생성 및 종료
			: 그러니까 다운로드 받던거 중지하고 끄고, 나중에 그거 다시 다운로드 받으면 이미 다운로드 받았던 부분까지는 빠르게 된다.
			: API, Sokcet, SSL , TSL 등

		: 6계층 - 표현 계층 presentaion layer : 전송하는 데이터의 표현 방식(데이터변환 압축 ,암호화등 인코딩 방식)을 결정
			: JPG , GIF, ASCII 등

		: 7계층 - 응용 계층 Application layer :  최종 목적지. 응용 프로세스와 직접 관계하여 일반적인 응용 서비스르 수행(explore, chrome)
			: 대표 프로토콜) HTTP , FTP, IMAP 등




IP Internet Protocol 주소 >> 인터넷상 IT 자원을 식별하는 고유한 주소
	구조 
		네트워크 ID >> 네트워크를 구분해주는 ID 
			: 네트워크가 같다 == 네트워크 대역대가 같다 == 네트워크 ID 가 같다
		호스트 ID >> 해당 네트워크에 속한 사용자에게 부여하는 고유의 번호
			: 조합 가능한 호스트 ID 개수 만큼 해당 네트워크에서 IP 생성 가능한 것 
				ex ) 호스트 ID 가 두 블럭 >> 2 ^ 16 즉 65536 개의 호스트 ID 를 가질 수 있으므로, 해당 대역에서 65536 개의 IP 생성 가능
	버전 
		: IPv4 >> 일반적으로 많이 씀
			: 4칸이 3개의 온점으로 구분되어 표현됨. 
				: 각 칸은 10진수 || 2진수로 표현됨
			: 가용범위가 부족한 것을 보완하고자 NAT, 서브넷팅 , private IP 등을 활용한다
		: IPv6
	
	분류
	    1. 통신 용도에 따른 분류
		(1) public 공인 IP >> 실제 인터넷 상에서 사용되는, 유일한 , ISP( Internet Service Provider ) 에서 제공하는 주소
		(2) private 사설 IP >> 인터넷이 아닌 독립된 네트워크 내부에서만 사용되는, 유일하진 않은, 네트워크 관리자가 제공하는 주소
			: 사설 IP 의 분류(클래스)와 범위
				:  tip 
				    : 젤 자주쓰는 192 번대 ~ 는 C클, 1바이트의 거의 끝인 ~126 은 A 클, 나머지는 B클이다
				    : 서브넷 마스크의 255 개수는 해당 클래스의 networkID 의 옥텟 갯수와 같음

				1. Class A >> 1~126까지 (= 첫 블락만 네트워크 ID부분 )  , 255.0.0.0(/8)
				2. Class B >> 128.0~191.255까지(= 앞 두블락만 네트워크 ID부분) ,255.255.0.0 (/16)
				3. Class C>> 192.0.0~223.255.255 까지(= 앞 세 블락이 네트워크 ID부분) , 255.255.255.0 (/24)
				
	    2. 할당 방식에 따른 분류
		(1) 고정 IP >> 네트워크 관리자가 수동으로 할당하는 방식
		(2) 유동 IP >> 특정 서버가 IP 주소 범위에 따라 동적 할당하는 방식
			: "DHCP Dynamic Host Configuration Protocol 을 통해 주소를 제공하는 서버" 와 "주소를 할당받는 클라이언트" 로 구성됨
			: IP 를 임대lease 하는 형태로 운영됨
		
				
				
DHCP Dynamic Host Configuration Protocol  >> 동적 호스트 구성 프로토콜. 호스트의 IP주소와 각종 TCP/IP 프로토콜의 기본 설정을 클라이언트에게 자동적으로 제공해주는 프로토콜
	: 기능 
		: 네트워크 안의 컴퓨터에 자동으로 네임 서버 주소, IP 주소, 게이트웨이 주소를 할당
		: 해당 클라이언트에게 일정 기간 임대해주는 동적 주소 할당

	: 네트워크에 사용되는 IP주소를 DHCP서버가 중앙집중식으로 관리하는 클라이언트/서버 모델을 사용
	: DHCP 의 구성
		1. DHCP 서버 >> 클라이언트에게 IP 할당 요청이 들어오면 일정한 범위의 IP 주소를 자동으로 할당해주는 서버.
			: DHCP 서버가 다운되면 IP 할당이 제대로 이뤄지지 않는다

		2. DHCP 클라이언트 >> 시스템이 시작하면 DHCP 서버에 IP 주소를 요청하는 쪽.
			: IP 주소를 부여받으면 TCP/IP 설정이 초기화되고 다른 호스트와 TCP/IP로 통신 가능해짐.
			: DHCP 클라이언트 를 단말 이라고도  한다

	: DHCP 프로토콜 원리
		: 임대 Lease>> DHCP 서버가 IP 주소를 영구적으로 단말에 할당하는 것이 아닌 , 특정 기간동안만 해당 IP를 임대 해주는 개념
			: DHCP 클라이언트가 임대 기간 이후에도 해당 IP 주소 사용을 원한다면 임대기간연장 IP Address Renewal 을 DHCP 에 요청 필요
			: DHCP 클라이언트가 해당 IP 주소가 더이상 필요하지 않다면 IP 주소 반납 절차 Ip address release 수행

	: IP 주소 할당 절차
		step1. DHCP Discover  >> 클라이언트가 DHCP 서버를 찾기 위한 "브로드캐스트" 메세지
			: 방향 >>클라이언트 -> DHCP 서버
 			: 주요 파라미터 >> Client MAC
			: 브로드캐스트 메세지 이기에 2개 이상의 DHCP 서버가 이에 대해 응답 가능

		step2. DHCP Offer >> 클라이언트를 감지한 DHCP 서버가 해당 DHCP 서버의 존재와 단말에 할당할 IP 주소 등 다양한 네트워크 정보를 담아 보내는 메세지
			: 방향 >>  DHCP 서버 -> 클라이언트
			: 주요 파라미터 >> 
				Client MAC: 클라이언트의 MAC 주소
				Your IP: 클라이언트에 할당(임대)할 IP 주소
				Subnet Mask (Option 1)
				Router (Option 3): 클라이언트의 Default Gateway IP 주소
				DNS (Option 6): DNS 서버 IP 주소
				IP Lease Time (Option 51): 클라이언트가 IP 주소를 사용(임대)할 수 있는 기간(시간)
				DHCP Server Identifier (Option 54): DHCP Offer를 보낸 DHCP 서버의 주소. 2개 이상의 DHCP 서버가 DHCP Offer를 보낼 수 있으므로 각 DHCP 서버는 자신의 IP 주소를 메세지에 포함

		step3. DHCP request : DHCP 서버의 존재와 제공받을 네트워크 정보를 수신받은 DHCP 클라이언트가 하나의 DHCP 서버를 선택하여 해당 서버에게 클라이언트가 사용할 네트워크 정보를 요청하는 메세지
			: 방향 >> 클라이언트 -> DHCP 서버
			: 주요 파라미터 >> 
				Client MAC 
				Requested IP Address ( 사용을 요청할 IP 주소 - DHCP Offer의 Your IP 주소 )
				DHCP Server Identifier ( 선택한 DHCP 서버의 IP 주소 )


		step4. DHCP ACK : DHCP 서버가 최종적으로 할당할 IP 주소 승인을 알리는 메세지
			: DHCP Ack를 수신한 클라이언트는 IP 주소를 포함한 네트워크 정보를 획득(임대)하게 되고, 인터넷 사용이 가능하게 됨
			: 방향 >> DHCP 서버 -> 클라이언트
			: 파라미터 >> DHCP Offer의 네트워크 정보와 동일
	:https://velog.io/@inhwa1025/DHCP%EB%9E%80-DHCP-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%98-%EC%9B%90%EB%A6%AC		


서브넷과 서브넷 마스크 >>host 필드 영역의 앞 비트 부분을 최대한 networkID 화 하여 hostID 영역을 줄여나간다
	: 서브넷 subnet >> 부분 네트워크. 하나의 네트워크를 분할하여 만들어진 네트워크 하나
		: IP 낭비를 줄이기 위해 도입된 개념( 실제로 조합 가능한 hostID 의 개수만큼 호스트 할당할 필요가 없을 때 사용)
		: 동일한 서브넷이란건 동일한 네트워크란 걸 의미. 네트워크 ID 부분인 같다

	: 서브넷 마스크 subnet mask >>  networkID 구하는데 사용되는 툴 같은것
		: IP 주소와 동일한 32비트 구조, 8비트 씩 4블럭 . 
			: ip와 다른점이 있다면 무조건 앞에서부터 쭉 1로 채워져야됨. 중간에 딴거 끼면 안되고. 0 한번이라도 나온 경우 그 뒤로 계속 0.
			ex ) 11111111.00000000.00000000.00000000 = 255.0.0.0
				11111111.11111111.11111111.10000000 = 255.255.255.128
		: 얼굴에 마스크를 쓰면 얼굴이 가려지는 것처럼, 서브넷에 마스크를 씌워 필요없는 IP 를 가린다는 의미로 마스크임
		: 사용 방법 >> IP 주소와 서브넷 마스크를 and 연산 시키면 , "네트워크 ID" 주소를 구할 수 있음. 

	: 서브넷팅 >> 하나의 네트워크를 여러개의 서브넷으로 분리하는 것
		: host 필드 영역의 앞 비트 부분을 최대한 networkID 화 하여 hostID 영역을 줄여나간다
			: 일단 network 필드는 못 건드리고 우리가 건드릴 수 있는 부분은 host 필드이다. 여기서 n 개의 비트를 networkID 화 하면 할당 가능한 네트워크 수는 2**n 개가 되고, 할당 가능한 호스트 수는 2**(8-n) 개가 된다(그러니까 2**(networkID 화 하고 나눈 비트 개수) ).
				: 실제로 할당 가능한 호스트 수는  2**(8-n) - 2 이다 << hostID 가 0 인거는 NetworkAddress 로, 255 인거는 Broadcast 로 고정되어있다 
 		: 결롡적으로는 서브넷 마스크 값이 커질수록 할당가능한 호스트 수는 줄어든다



CIDR Classless Inter-Domain Routing : 서브넷 마스크를 1의 갯수로 간략하게 표현하는 것. 서브넷 마스크의 표현 방법.
	:  IP 주소 뒤에 슬래시("/")와 숫자를 붙여 서브넷 마스크의 길이를 나타냄
		ex ) 192.168.0.0/24 >> 24비트의 서브넷 마스크를 사용하는 네트워크


라우팅과 라우터
	라우팅 routing >>네트워크 상에서 데이터를 보낼때 최적의 경로를 선택하는 과정
	라우터 router >> 라우팅 하는 장치. 
		: routing table 이라는 서브넷의 경로 리스트를 가지고 라우팅 하게 된다


TCP 와 UDP >> OSI 7 계층의 전송 계층의 대표 프로토콜들 . 데이터 전송을 담당
	TCP Transmission Control Protocol >> 1:1 통신 방식
		: 연결형 프로토콜 >> 연결이 성공해야 통신이 가능
		: 패킷이 제대로 도착했는지 확인한다
		: 신뢰성 높음 but 전송속도 느림
		: 속도보다 안정적인 데이터 전송이 필요할 때 사용

	UDP User Diagram Protocol >> n:n 통신 방식
		:  비연결  프로토콜 >> 데이터를 주고받을 때 연결 절차를 거치지 않고 발신자가 일방적으로 데이터를 발신하는 방식
		: 패킷이 제대로 도착했는지 확인 안한다
		: 신뢰성 낮음 but 전송속도 빠름
		: 데이터 유실에 큰 지장 없고 빠른 속도가 필요할 때 사용


	: TCP 와 UDP 를 사용하는 응용 서비스는 서로를 구분할 수 있도록 포트번호를 사용
		: IANA 라는 관리 기관서 정의
		: 포트 번호 범위
			well-known port : 0~1023
			registered port : 1024 ~ 1024~49151 
			dynamic port : 49152 ~ 65535



TCP/IP >>  프로토콜들의 모음집. Protocol Suite.
	: TCP , IP 자체와 관련있는게 아니라 OSI 7 레이어와 같이 네트워크를 이해하기 위한 모델이다.
		: 굳이 이 모델의 이름이 TCP/IP 인 것은 여러 프로토콜 중 TCP 와 IP 가 가장 많이 사용되기 때문.
		: 쩄뜬 작명센스가 ㅈㄴ 구리다는걸 새삼 다시 깨달음

	: 참고로 이 모델은 아레와 같은 4계층으로 이뤄진다
		1.Network Access Layer
		2.Internet Layer
		3.Transport Layer
		4.Application Layer

	: https://velog.io/@ksi05503/tcp-ip




ARP Address Resolution Protocol
	: IP 와 MAC 주소를 서로 매핑하는 절차. 그러니까 상대편의 MAC 어드레스를 알기 위해서 하는 동작.
		: 일반적으로 IP 주소만을 보기 때문에 IP 주소로만 통신을 생각하지만 IP 를 MAC 으로 바꾸는 절차를 거친다. 
		: IP == 논리적 주소, MAC == 물리적 주소


---------------------------------------------------------------------------------------

3.2 AWS 네트워킹 

군집화 clustering >> 데이터의 특성을 분석하여 유사한 속성을 갖는 데이터끼리 하나의 군집 cluster 으로 묶는 작업

호스팅 hosting >> 서버에 배치된 리소스가 인터넷을 통해 접근 가능하게 되는 것
	: 호스팅 가능하다 == 요청을 통한 응답을 받을 수 있다

백본 네트워크 >> 대규모 데이터 전송을 지원하는 고속 네트워크 인프라로, 다양한 네트워크를 상호 연결하는 핵심 네트워크.
	: 쉽게 정리하면, 주요한 네트워크 경로.
	: 글로벌 인터넷 트래픽의 주요 경로를 형성. 
	: 참고로 backbone 영단어 자체는 등뼈. 척수.인데,  "백본" 네트워크라는건 그만큼 중추적인 역할이란 것.
	: 의미상 backbone == backbone network == backbone switch 
	: 주로 광섬유 케이블로 통신된다
	: https://josaboo.tistory.com/93



리전 , 가용영역 >> 특정 영역을 지칭하기 위해 AWS 에서 사용하는 용어
	: 우리나라에는 서울 리전과, 4개의 가용영역이 있다.
	: 서버 ⊂ 데이터 센터 ⊂ Availability Zone ⊂ Region
	: 가용영역 Availability Zone AZ>> 물리적 데이터 센터의 논리적 집합
		: 물리적 데이터 센터는 50000 ~ 80000 대의 물리적 서버가 존재
		: 쉽게 설명하자면, 애플리케이션이 한 곳에서 뻑나도 다른 곳에서 정상 운영되게 하기 위해 도입한 개념
			: 하나의 인스턴스에 장애가 발생하더라도, 복수의 AZ 에 걸쳐 인스턴스를 배포했다면,  다른 영역의 인스턴스가 요청을 이어받아 처리하게 할 수 있다.


		: 가용영역 ID . 가용영역 코드.
			: "리전-알파벳"꼴. 
				ex )  us-east-1 리전에서의 가용영역ID는 us-east-1a,  us-east-1b,  us-east-1c .... 

			: 모든 AWS 계정마다 동일한 ID 를 사용하지만, 가용영역ID는 무작위로 실제 리소스와 맵핑되기 떄문에, 동일한 ID 라고 해서 같은 리소스를 나타내지 않는다. 
			    : 이는 보안 및 트래픽 몰림 방지 목적.
				ex ) 사용자A , 사용자B가 us-east-1a 라는 같은 가용영역ID를 가진다해도 해당 가용영역ID 는 다른 물리적 리소스를 의미할 수도 있다.
			: https://docs.aws.amazon.com/ko_kr/ram/latest/userguide/working-with-az-ids.html



	: 트랜짓센터 transit center >> 리전 내부 네트워크를 외부 네트워크와 연결하는 중간 허브 역할.
		: 리전 내부의 가용영역이 트랜짓 센터를 통해, 외부 인터넷과 통신 가능하게 된다. 

	: 리전 Region >> 전 세계 주요 도시의 데이터 센터를 clustering 하는 물리적 위치.
		:  AWS 서비스가 요청되고 그에 따른 응답을 받을 수 있는 지리적 위치를 기준으로 구분한(= AWS가 호스팅 되는 지리적 위치를 기준으로 구분한) 단위로, 2개 이상의 가용영역으로 구성된다.
		: 쉽게 설명하자면,  클라이언트와 가까운 곳에서 클라우드 서비스를 제공하기 위해 도입된 개념
		: 리전 내부의 네트워크 환경 >> "트랜짓 센터"와 "가용영역"이 서로 연결되어 네트워크 환경을 이룸
			: 분류 >> 네트워킹 측면으로 어떤 대상과 연결되었느냐를 기준으로 
				1. Intra-AZ 연결 : 같은 가용영역 내의 리소스 간 네트워크 연결
					: 같은 가용영역에 존재하는 데이터 센터들은 고밀도 광섬유 케이블로 상호 연결되어 네트워킹 환경을 구성함

				2. Inter-AZ 연결 : 서로 다른 가용영역에 위치한 리소스 간 네트워크 연결
					: 같은 리전에 존재하는 가용영역이라도, 서로 물리적으로 멀리 떨어져있다. but 전용선으로 논리적 연결되있어 빠른 속도로 통신 가능하다.
						: 물리적으로 떨어져있는건 천재지변, 테러등에 대비 목적.

				3. transit center 연결 : 리전의 가용영역에서 외부 인터넷과 통신이 필요할 때, 트랜짓 센터를 통해 통신하게 되는 것. 

				
 		: 각 리전은 독립적이다. 
			: 특정 리전에선 원하는 AWS 서비스가 아직 준비되지 않은 경우도 있고, 리전 별로 가격이 상이한 경우도 있다.
			: seoul 리전에서 생성한 AWS 자원은 seoul 리전에만 국한되고, 다른 리전에는 해당 자원이 존재하지 않는다. 
			: 대부분의 서비스가 리전별로 독립적으로 관리되기 떄문에, 서비스를 이용할 때 어느 리전에서 사용할 지 미리 계획해야됨

 



엣지 POP edge Point Of Presence : 글로벌 서비스 콘텐츠를 제공하는 센터
	: 교재에서는 편의상 "엣지 팝"이라고 부르는 것 같은데 구글링 해보면 보통 "엣지"라고만 하거나 "POP(Point of presence)"하나로만 부름. 둘이 합쳐서는 잘 안부름
	: 보통 CDN 서비스를 제공하기 위해 만들어진다
		: CDN(Contents Delivery Network) 서비스 >> 콘텐츠를 보다 빠르게 전송하는 기술로, 속도 개선과 회선 비용 절감에 용이
			: 최초 요청 시에는 서버로부터 콘텐츠를 가져와 고객에게 전송하며, 동시에 CDN 캐싱장비에 저장한다.이후에는 CDN 캐싱 장비에 저장된 콘텐츠를 바로 전송하는 방식이다. CDN 업체에서 지정하는 컨텐츠 만료 지점까지 호출이 없으면 주기적으로 삭제한다.

	: 구성 
		1. 엣지 로케이션 edge location : 여러 서비스들을 가장 빠른 속도로 제공(캐싱) 하기 위한 거점
			: 보다 정확히 말하자면 리전과 가용영역과 별개로 AWS의 CDN 서비스인 CloudFront과 AWS의 DNS 서비스인 Route53의 캐시 서버

		2. 리전별 엣지 캐시 regional edge cache :  CloudFront의 오리진 서버(CDN)와 에지 로케이션 사이에 위치
			: 서비스를 이용하려고 할때, 엣지 로케이션에 컨텐츠가 없는 경우 리전별 엣지 캐시에서 검색 시도. 결국 CDN 서비스의 엣지 로케이션이랑 비슷한 개념이라 적당히 이해

	: AWS 리전 내의 AZ 와 엣지 POP 의 연결 방식 
		: 일반적인 서비스 >> 가용영역은 트랜짓 센터를 통해 인터넷 구간과 연결되어 통신
		: 엣지 POP 을 활용한 서비스 >>가용영역은 트랜짓 센터를 통해 AWS 백본 네트워크와 연결됨.  AWS 백본 네트워크는 엣지 POP 과 연결되어 데이터를 고속 전송함. 엣지 POP 이 최종적으로 AWS 글로벌 네트워크를 통해 사용자에게 데이터를 제공

	: AWS 글로벌 네트워크, AWS 백본 네트워크 , 엣지 POP >> AWS의 전 세계적인 인프라를 구성하는 중요한 요소
		: AWS 글로벌 네트워크 >>AWS의 모든 리전, 가용 영역, 엣지 POP를 연결하는 전 세계적인 네트워크 인프라
		: AWS 백본 네트워크>> AWS 글로벌 네트워크의 주요 고속, 고용량 네트워크 인프라
		: 엣지 POP >> 빠른 글로벌 서비스 제공 위한 데이터 센터

	: Amazon CloudFront , Amazon Route 53 , AWS Shield , AWS Global Accelerator

	: https://inpa.tistory.com/entry/AWS-%F0%9F%93%9A-%EC%95%84%EB%A7%88%EC%A1%B4-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%EC%A1%B0-Region-AZ-Edge-Location-Cache-%EC%99%84%EB%B2%BD-%EC%A0%95%EB%A6%AC#%EB%A6%AC%EC%A0%84_%EC%97%A3%EC%A7%80_%EC%BA%90%EC%8B%9C_regional_edge_cache



대표적인 AWS 네트워킹 서비스 
    : 네트워크 기반
	: VPC >> 사용자 전용 가상의 프라이빗 클라우드 네트워크 
	: Transit Gateway >> 중앙허브 개념처럼, VPC 와 온프레미스 네트워크를 연결하는 단일 게이트웨이
    : 엣지 네트워킹
	: Route53 >> 확장 가능한 관리형 DNS 서비스
		: 도메인 등록, 라우팅, 상태 확인 등의 서비스 제공
	: Global Accelator >> AWS 글로벌 네트워크를 활용한 애플리케이션 가용성 및 성능 개선
    : 하이브리드 연결
	: Direct Connect >> 온프레미스 환경과 연결하는 AWS 전용 네트워크 
 	: Site-to-Site Connect >> 온프레미스 환경과 연결하는 암호화된 네트워크 


---------------------------------------------------------------------------------------

3.3 Amazon VPC 


대역폭>> 초당 처리할 수 있는 데이터의 양

라우터와 게이트웨이 >> 라우터 != 게이트웨이
	: 둘이 많이 헷갈려하는 이유 >> 라우터로 대표적인 공유기만 해도, 그냥 기기가 아닌 라우팅 + NAT + 게이트웨이 ... 기능이 포함된 복합 통신 기기. 보통 같이 딸려 제공 되는 경우가 다수여서 동일시 하는 경우가 있는 듯

	: 라우터 >> "같은 프로토콜"을 사용하는 네트워크 간의 데이터 송수신을 수행하는 "하드웨어적"인 것
		: 주로 LAN 과 WAN(OSI 3계층)을 연결하는데 사용
		: 프로토콜이 다르다 >>  로컬 네트워크의 통신 프로토콜과 인터넷의 통신 프로토콜이 다르다

	: 게이트웨이 >> "서로 다른 프로토콜"을 사용하는 두 네트워크 간 데이터를 송수신 가능하게(== 변환) 하는 "소프트웨어"적인 것.
		: 주로 프로토콜이 다른 네트워크(OSI 4계층)를 연결하는데 사용
			: 얘가 다른 네트워크와의 통신을 가능하게 해주는 얘임
			: 네트워크에서 다른 네트워크로 가는 입구라고 보면 됨.

	: 라우터와 게이트웨이 차이 >>
		: 쉽게 풀어놓은 >> https://blog.naver.com/the-woman/223404957249
		: 간략한 >> https://puzzle-puzzle.tistory.com/entry/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%9A%A9%EC%96%B4-%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4-Gateway-%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4%EC%99%80-%EB%9D%BC%EC%9A%B0%ED%84%B0-%EC%B0%A8%EC%9D%B4%EC%A0%90

	: 둘이 많이 헷갈리는 이유 >> https://m.blog.naver.com/kangyh5/223175392071


Amazon VPC Virtual Private Cloud  >> 사용자 정의로 구성된 가상의 프라이빗 클라우드 네트워트 
	: 자신만의 데이터 센터에서 네트워크 환경을 구성하는 것처럼, 클라우드 네트워크를 구성 가능
	: 리전
		: 하나의 리전에 여러개의 VPC 생성 가능
		: VPC는 리전 별로 독립적이고, 각 VPC 자체로도 서로 독립적
			ex ) 서울 리전에서 생성한 VPC 는 서울 리전에만 있음
			ex ) 서울 리전의 VPC A 와 VPC B는 서로 독립적이다
		: (독립적이라곤 하지만) 필요에 따라 VPC 들을 서로 연결하여 네트워크 확장 가능

	: 서브넷 . 가용영역.  IP CIDR
		: Amazon VPC 도, 하나의 네트워크로써 서브넷으로, 분리된 네트워크로 구성할 수 있다. 
		: 서브넷은 반드시 하나의 가용영역에 종속적으로 위치
			: 그러니까 서브넷이 여러 가용영역에 걸쳐 있을 수 없단 말
			: 그러니까 각 서브넷은 특정 가용영역 내에 위치하여 그 영역의 자원만을 사용하고, 다른 가용영역의 자원과는 독립적으로 동작한다는 것 >> 고가용성과 내결함성 제공
				: 내결함성 Fault Tolerance >> 시스템이 일시적인 장애나 오류를 감지하고 복구할 수 있는 능력을 가지는 것
				: 고가용성 High Availability >> 사용자가 언제든지 시스템에 접근할 수 있도록 보장하는 것
		: 각각 다른 가용영역에 속한 서브넷을 하나의 VPC가 가지게 할 수 있다
			: 그러니까 하나의 VPC 는 특정 가용영역에 종속적이지 않다. 여러 가용영역에 걸쳐 존재할 수 있다

		: 서브넷의 종류 << 해당 서브넷이 (VPC) 외부와도 소통을 할 수 있는 지의 여부
			1. 퍼블릿 서브넷 >> (인터넷 구간과 연결이 되있어) 외부 인터넷과 통신이 가능한 네트워크 영역.
				: 해당 서브넷이 속한 VPC 의 게이트웨이를 통해 외부와 통신하게 된다

			2. 프라이빗 서브넷 >> 인터넷 구간과 연결이되지 않은 폐쇄적인 네트워크 영역.


		: 서브넷팅을 하기 위해, CIDR 표기법을 사용
			: VPC 에 특정 범위의 IP 가, CIDR 표기법을 통해 할당됨
			: VPC 내부의 각 서브넷에 특정 범위의 IP가 , 마찬가지로 CIDR 표기법을 통해 할당되는데, VPC 에 할당된 IP 범위를 n빵 하는 꼴임
			:  각 서브넷 내부의 자원에 (범위를 만족하는) 특정 IP 가 할당됨.
				: 자원에는 IP 범위가 아닌 특정 IP 가 할당되는거다

	: inbound 와 outbound 
		: inbound >> 인스턴스로 외부에서 들어오는 과정. 인스턴스<- 인터넷 방향 통신
		: outbound >> 인스턴스에서 외부로 나가는 과정. 인스턴스-> 인터넷 방향 통신




	: 가상 라우터
		: Amazon VPC 를 생성하면 기본적으로 가상 라우터가 생성됨
		: 라우팅 테이블
			: 가상 라우터는 기본적으로 기본 라우팅 테이블을 보유
			: 별도의 라우팅 테이블도 생성 가능
			: 라우팅 테이블을 서브넷과 attach( 연결 )하여 서브넷마다 라우팅 테이블을 가지게할 수도 있음
				: 서브넷마다 라우팅 테이블을 두어 별도로 관리할 때의 장점 >> 서브넷 별(=대역 별)로 다른 보안 요구 사항과 네트워크 경로를 적용가능
					; 라우팅 테이블의 경우 column 으로 "목적지 대상"과 "타깃 대상"이 있는데, 타깃 대상으로 뭘 선택하느내 따라 보안을 다르게 할 수 있다 
						: 타깃 대상 
							0. 로컬  > VPC 내부 간 통신
							1. 인터넷 게이트웨이 > 외부와 양방향 접근 허용. 
							2. NAT 게이트웨이 > 외부와 단방향 접근 허용.
					: https://martinkim1954.tistory.com/entry/AWS-%EB%9D%BC%EC%9A%B0%ED%8C%85%ED%85%8C%EC%9D%B4%EB%B8%94Route-Table-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EB%9D%BC%EC%9A%B0%ED%8C%85


	: 보안 그룹, 네트워크 ACL >> 가상의 방화벽(firewall) 기능 
		: 서브넷과 생성된 자원에 대해 트래픽 접근을 통제하는 것이 주된 목적
		: 보안 규칙 >>IP CIDR 블록, 프로토콜, 포트 번호 등을 정의해 트래픽의 allow || deny 를 결정
			:  방향성이 있다 ( inbound , outbound )

		: security group 과 ACL 차이점 >> 
			: 보안 그룹 security group >> 
				1. 접근 제어 대상 : 인스턴스와 같은 자원 접근을 제어
				2. stateful 접근 통제 : 이전 상태 정보를 기억하고, 다음에 그 상태를 활용
					: 이전 상태 정보를 기억 한다는 것 == 인바운드 규칙에 따라 트래픽을 허용했었던 경우, 해당 정보를 기억하고 아웃바운드 규칙에 상관없이 자동으로 트래픽을 허용한다
						: 그러니까 인스턴스 내부로까지 접근을 허용했던 녀석인데 굳이 나가는 것 까지 체크해야돼? 느낌.
				3. 허용 규칙 만 존재. 
					: 허용 규칙에 해당되지 않으면 자동으로 거부됨.(거부 규칙 간주)

			: 네트워크 ACL Access Control List >> 
				1. 접근 제어 대상 : 서브넷 접근 제어. 그러니까 네트워크 접근 제어
				2. stateless 접근 통제 : 이전 상태를 기억하지 않고 그를 활용하지 않음
					: 이전 상태 정보를 기억 하지 않는다는 것 == 인바운드 규칙에 따라 트래픽을 허용했었더라도, 아웃바운드 규칙으로 트래픽 허용 여부를 판단한다.
				3. 허용 규칙, 거부 규칙 각각 존재. 규칙을 순차적으로 확인하고 허용과 거부를 판단				
					: 네트워크 ACL 에 정의한 "모든" 규칙이 매칭 되지 않으면 기본적으로 거부됨


	: Amazon VPC 와 다른 네트워크 간의 통신
		: Amazon VPC 는 "프라이빗 네트워크"로, 기본적으로 외부 인터넷 구간과 연결되지 않은 독립적인 네트워크. >> 외부 네트워크와의 통신을 위해선 별도의 자원 필요
		: (외부 네트워크와의 통신을 가능하게 하는) 네크워킹 자원 
			: how to use >> 
				1. 네트워킹 자원 생성
				2. 생성한 네트워킹 자원을 Amazon VPC 에 연결. attach.
				3. 특정 Amazon VPC 내의 특정 public subnet 의 해당 라우팅 테이블의 타겟 대상을 attach 한 네트워키킹 자원으로 함 >>  외부 인터넷 구간과 해당 public subnet 이 통신 가능하게 된다
			: 종류
				1.internet gateway>> VPC 와 인터넷 구간의 논리적 연결. 인터넷으로 나가는 관문
					: 퍼블릭 서브넷이 됬건 프라이빗 서브넷이 됬건, 실질적으로 외부 인터넷과 통신 가능하게 하는 것은 인터넷 게이트웨이.
					: 인터넷 게이트웨이의 경우 퍼블릭 서브넷만 직방으로 사용 가능.
						: 퍼블릭 서브넷은 그 자체로도 퍼블릭 IP를 가지고 있어서 가능한 것. 
							: 반면에 프라이빗 서브넷은 그 자체로는 퍼블릭 IP 를 가지고 있지 않아 별도로 NAT 게이트 웨이를 거친 후에야, Internet gateway 를 통해 외부로 나갈 수 있다.
					; 양방향 (인바운드 , 아웃바운드 모두 허용)
 
				2. NAT gateway Network Address Translation gateway >> NAT 기능(private IP 주소를 public IP 로 변환하는 기능)을 제공하는 게이트웨이.
					: private subnet 에서 외부 인터넷으로 통신하는 관문.
						: 그렇다고 private subnet 이면 NAT gateway 만 있음 통신 가능하단게 아니라, NAT gateway 를 거친 후에 별도로 Internet Gateway 를 거쳐야됨. 
						; private subnet 은 외부 인터넷 구간과 단절된. 독립된. 네트워크라곤 하지만, 실제로 완전히 단절된건 아니고,  NAT 게이트웨이트를 통해 프라이빗 IP 주소를 퍼블릭 IP 주소로 변환한후, 인터넷 게이트웨이를 통하여 외부 인터넷 구간과 통신 가능하다.
					: NAT 게이트웨이는, (실제 인터넷 게이트웨이와 연결된) 퍼블릭 서브넷에 위치함. 
					; 단방향(아웃바운드만 OK, 인바운드는 NO. )
						: 외부 인터넷 구간에서 프라이빗 서브넷의 IP 주소로는 데이터를 송수신 불가 << 그럼 포트포워딩 하면 되지 않나??
		
					: https://velog.io/@happyyeon/AWS-VPC-NAT%EC%9D%B8%ED%84%B0%EB%84%B7-%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4

				3. VPC 피어링 Peering  : 서로 다른 "VPC" 를 , 1 대1로 연결하는 기능. 
					: 다른 리전, 다른 계정 에 위치한 VPC 와도 연결 가능
					: 주의 >>
						1. 1 대 1 연결만 지원. 
							: 물론 다른 VPC 와 간접적으로 연결되게 할 수 있지만, 직접적으로 여러개 연결시키진 못함.
						2. VPC 피어링으로 연결할 경우 IP CIDR 블록이 중복되면 연결 불가능하므로, VPC 피어링으로 네트워크 확장 시 IP 주소 대역 반드시 점검할 것.


				4. 전송 게이트웨이 transit gateway : 다수의 VPC ,온프레미스, VPN 등을 중앙집중식으로 관리 가능한 네트워크 허브
					: 수백 개의 VPC와 연결할 수 있어, 대규모 네트워크 인프라에 적합
					: 작동 방식
						: VPC 통신>> transit gateway 에 연결만 해주면, 해당 transit gateway 에 연결된 모든 다른 VPC 와 통신이 가능
						: 온프레미스 통신 >> 
							1. site-to-site VPN 사용 : IPSec 암호화 프로토콜을 사용해 AWS Cloud 환경과 On-Premise 환경을 연결해주는 서비스
							    : AWS에는 transit Gateway 가 , On-Premise에는 CGW가 붙어있고 둘 사이에 IPsec 프로토콜을 이용해 상호간 통신이 가능하게만들어 주는 원리 
								step1. CGW 생성 : 온프레미스 라우터의 공인 IP 주소를 사용하여 생성
									: CGW Customer Gateway 고객 게이트웨이 >> On-Premise의 라우터 값을 AWS에 제공해주는 서비스. AWS 에서 구성되는 가상의 게이트웨이
										: 온프래미스 내부적으로 이를 활용하기 위해선 별도의 VPN 을 준비해둬야됨. VPN 협상은 항상 고객 게이트웨이 디바이스(클라이언트 측)에서 연결을 시도해야 한다.

								step2. VPN gateway 생성 : AWS에서 VPN 게이트웨이를 생성
									: VPN Virtual Private Network 가상 사설망 >>공용 네트워크를 통해 프라이빗 네트워크에 안전하게 접근할 수 있도록 하는 기술
										: 원격 접근, 지리적 차단 우회, 공용 네트워크 사용 시 보안을 강화하는 등의 목적으로 사용

								step3. 생성한 VPN gateway 를 transit Gateway 에 연결

								step4. 생성한 VPN gateway 와 CGW 간의 VPN 연결 설정

								step5. Transit Gateway의 라우팅 테이블을 업데이트하여 온프레미스 네트워크와 VPC 간의 트래픽을 올바르게 라우팅




								: https://velog.io/@rhgkssk1114/Site-to-Site-VPN-%EC%9D%B4%EB%9E%80


							2. AWS Direct Connect 사용


Amazon VPC 요금 >> 기본적으로 Amazon VPC 사용 요금은 발생 안함 , but 일부 기능 대해 요금 발생
	: 그 일부 기능 >> NAT 게이트웨이
		: 최초 프로비저닝한 후 "시간"에 따른 요금, 기가 바이트 단위로 데이터 처리 요금이 부과됨
			: 사용 시간이 1시간 미만이더라도, 1시간으로 청구된다
		: 참고 ) 서울 리전의 NAT 게이트웨이는 1시간 당 100원 미만의 요금 발생 가능



---------------------------------------------------------------------------------------

3.4 Amazon VPC 실습
	- 퍼블릭 서브넷 환경과 프라이빗 서브넷 환경 구성 및 통신을 확인



CIDR 는 '사이더' 라고 읽는다

0.0.0.0  >> 예약된 특수한 IP로 , IP주소를 적어야 하는데, 적을 게 없을 때 쓰는 '지정된 주소 없음' 의 의미.
	: 리눅스 라우팅 테이블에서 destination 컬럼에서의 0.0.0.0 값과 Gateway 컬럼의  0.0.0.0 값의 의미는 다르다 <-- 언뜻 보기엔 또이또이 해보긴 해도 다른게 맞다.
		: Destination 의 0.0.0.0 >> 부정확한 모든 IP 를 수용하는 표현
		: Gateway 의  0.0.0.0 >> Iface 로 패킷을 보내게하는 특정값
		: genmask, subnetmask 의 0.0.0.0 >> 모든 IP 주소와 일치해야된다. 
	: https://mamu2830.blogspot.com/2022/10/what-is-0.0.0.0%20.html

0.0.0.0/0 >> 모든 IP 범위.
	:  IPv4 패킷을 전송하려는 컴퓨터가 자신의 IP주소를 모르는 경우, 통신하기 위해 사용
	: https://inpa.tistory.com/entry/WEB-%F0%9F%8C%90-00000-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80



동일 대역으로의 패킷 전송 vs 다른 대역으로의 패킷 전송
	: 동일 대역으로의 패킷 전송 >> ARP 사용 &&  gateway를 거치지 않음.
		1. PC1은 ARP를 사용하여 PC2의 MAC 주소를 알아냅니다.
			(1) ARP 요청 : broadcast message 로
			(2) ARP 응답

		2. PC1은 PC2의 MAC 주소를 얻은 후, 데이터 링크 계층 헤더에 PC2의 MAC 주소를 포함시켜 패킷을 전송합니다.
		3. 패킷은 물리적 네트워크를 통해 PC1에서 PC2로 직접 전달됩니다.
		4. 동일한 서브넷 내에서는 기본 게이트웨이를 거치지 않고, 직접 MAC 주소를 사용하여 통신합니다.	


	: 다른 대역으로의 패킷 전송 >> ARP 사용 &&  gateway를 거침
		1. PC1은 자신이 보내고자하는 패킷의 목적지 IP 주소가 다른 대역에 속하는 것을 인식하고, 패킷을 게이트 웨이로 전송해야하는걸 깨달음
		2. PC1은 ARP 를 사용하여 게이트웨이의 MAC 주소(=라우터의 MAC주소)를 알아냄
		3. 라우터의 MAC 주소를 포함시켜 패킷을 전송
		4. 라우터는 자신의 라우팅 테이블을 참조하여 패킷을 전달
			: 라우팅 테이블을 참조했을때, 목적지가 다른 라우터면 다른 라우터로 전달
			: 라우팅 테이블을 참조했을때, 목적지가 해당 라우터가 속한 특정 단말일 경우
				(1) ARP 요청 : 라우터가 broadcast 메시지 보내서 해당 단말 찾음
				(2) ARP 등답
				(3) 라우터가 MAC 주소를 패킷에 포함하여 해당 단말에게 전송


AWS 라우팅 테이블 
    : 리눅스 라우팅 테이블과 좀 비슷
    : 작동 방식 >> "패킷의 목적지 주소"와 "라우팅 테이블의 destinantion 주소"가 일치하면, ( 해당 destinantion 과 같은 row 의 ) "target 주소" 로 패킷이 라우팅 된다.
    : 테이블 핵심 컬럼 
	: 목적지 destination >> 목적지 네트워크. 
		: 리눅스의 destination 컬럼에 대응
		    : AWS 의 경우 CIDR 표기법으로 destination 값이 표기되있지만, 리눅스의 경우 destination 컬럼 따로 , Genmask 컬럼 따로다 <-- 리눅스의 destination , genmask 를 짬뽕해둔게 AWS의 destination
			: 리눅스의 Genmask >>  SubnetMask 기능 . 동일 or 외부네트워크 인지 구분짓는 , 결정하는 역할을 하게 됨
				: 패킷의 주소와, Genmask 값 을 AND 연산하여, 그 결과가 해당 row의 Destination 값 과 동일할 경우 해당 row 의 gateway 로 가게 하는거다.

		: destination 값이 0.0.0.0 >> 지정된 주소 없는. 기본 경로 란 뜻
			: 목적지가 명시적으로 정의되지 않은 모든 패킷이 해당 row 에 맵핑되게 된다.

	: 대상 target >> 네트워크 트래픽을 어디로 라우팅할지
		: 리눅스의 gateway 컬럼 혹은 Iface 컬럼에 대응됨. <-- 리눅스의 gateway, iface 을 짬뽕해둔게 AWS Target 
			: gateway 컬럼 >>트래픽이 향해야 하는 다음 홉. 즉, 특정 게이트웨이 리소스
				: gateway 값이 0.0.0.0 >> (인터페이스와) 직접 연결 이란 의미.
					: 해당 row 의 Iface 컬럼 값의 인터페이스로 직접적으로 패킷을 보내겠다는 의미
					: 그러니까 gateway 에서의 0.0.0.0 은 하나의 명확한 값인 것.
					: gateway 값이 0.0.0.0 이 아닌 경우, 해당 gateway 로 패킷이 전송된다
						:  해당 gateway 로 패킷이 전송되긴 하지만, 네트워크 패킷 전송 특성상 어찌됬건 인터페이스를 거치긴 거친다.

			: Iface 컬럼 >> 패킷을 송신할 네트워크 인터페이스. 즉, 로컬 네트워크 인터페이스.
				: gateway 를 거치건 안거치건, 라우터를 통해 패킷을 전송할 경우 인터페이스를 무조건 통과하게 되어있다.

    : 쉽게 설명한 라우팅 테이블 >> https://blog.naver.com/mybrainz/150148575841
    : https://deadheromaybewantsomething.tistory.com/30



와이파이를 사용하면 스마트폰과 내 PC의 공인 IP 주소가 같다 >> 공유기의 NAT 기능을 이용해 한 공인 IP 를 사용해서 그렇다



랜카드 LAN Card : 컴퓨터를 네트워크에 연결하는 역할을 하는 부품.

탄력적 네트워크 인터페이스 Elastic Network Interface. ENI >> EC2 를 생성할 때 자동생성 되는 것으로 ,  일종의 가상 랜카드
	: EC2 의 보안 그룹과의 연결, 서브넷과의 연결을 담당한다
		: EC2 는 사실 서브넷 안에 있는게 아니다. 서브넷 안에있는 ENI를 통해 EC2 와 Subnet 이 연결되어, EC2가 서브넷 안에 있는 것처럼 보이는거다.
	: 포함하는 정보
		: MAC address 
		: 보안 그룹
		: IP 주소
			private IP 주소
			Public IP 주소 <-- 이건 필수 아님 

	: EC2 는 반드시 1개 이상의 ENI 를 보유한다
		: 하나의 EC2 에 여러개 달 수도 있다.
	: https://jibinary.tistory.com/133


탄력적 IP 주소 Elastic IP address. EIP >> 고정된 공인 IP 주소를 할당하는 서비스 
	: 기본적으로 AWS 에서 부여하는 pubilc IP 주소는 유동적 ( 어떤 이벤트 발생시 , IP 가 변경됨 - ex: 인스턴스를 중지 후 재시작하면, public IP 가 대부분 변경됨 )인데, 이와 반대되는 개념. 경우에 따라 추가적인 비용이 발생하는 서비스이다.
		: public IP 주소가 유동적일 경우 발생 가능한 문제 예시 >>  인스턴스를 재시작하기라도하면, 사용자가 이전에 해당 서비스를 이용하기 위해 접속해오던 IP 로 더이상 해당 서비스를 이용할 수 없게 된다.
		: 기본적으로는 무료인데, 사용하지 않거나 ENI에 부어있지 않을 경우 추가 비용 발생한다

	: EIP 를 할당받고 삭제하기 전까지는 해당 IP 주소를 쭉 유지 가능 
	: https://inpa.tistory.com/entry/AWS-%F0%9F%93%9A-%ED%83%84%EB%A0%A5%EC%A0%81-IP-Elastic-IP-EIP-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80




실습 단계
	1. custom VPC 생성
		: Amazon VPC 는 생성 주체에 따라 2가지로 구분 
			(1) default VPC  기본 VPC >> 리전마다 하나씩 있고, AWS 네트워킹 리소스가 미리 생성되어있음.
			(2) custom VPC 사용자 정의 VPC >> 사용자가 수동으로 정의하는 VPC. 리전별로 최대 5개까지 생성 가능.
				: 다음을 정의 << 사용자 정의라고 해서 생각보다 뭐 정의하고 그런게 많진 않다
					1. 이름 태그 
						: 이름과 태그를 , 중간에 - 를 기준으로 구분해 입력함
						: 실습에서는 CH3-VPC 로 함

					2. IPv4 CIDR 
						: 실습에서는 수동으로 입력, 10.3.0.0/16으로 함
				
				: custom VPC 의 세부 정보
					VPC ID : VPC의 고유 ID. 자동생성됨
						: 이를 앞서 설정한 이름 태그로 대신 할 수 있다. (아무래도 길고 복잡하니까)
					상태 : 
						Avaliable >> 사용 가능한 상태
					IPv4 CIDR : VPC 에서 사용하는 IP 대역
						: custom VPC 생성할 떄 설정했던 IPv4 임
					기본 라우팅 테이블 : VPC 에서 사용하는 기본 라우팅 테이블 
					기본 네트워크 ACL  : VPC 네트워크 보안 정책 
					기본 VPC 여부 : default VPC 가 아닌 custom VPC 이므로, '아니요' 라고 표시됨
					

		: 네트워크 ACL 의 인바운드/아웃바운드 규칙 >> 순차적으로 확인 및 적용됨.
			

		: 절차
			step1. 서비스-네트워킹 및 콘텐츠 전송-VPC 택  >> VPC 대시보드 확인 가능
				: 가운데선 리전마다 생성된 VPC 리소스 확인 가능
					: 리전 별 VPC 보면 내가 아무짓 안해도 1개정도씩 있는 것 볼 수 있는데, 이게 default VPC 임 

			step2. VPC 생성 버튼 누르고, 정의 ( 이름 태그, IPv4 CIDR 위에 적은대로)하여, 생성
				: step3 와 step4 에서 확인하게 되겠지만, custom VPC 생성만 해도 라우팅 테이블과 보안 규칙 등의 네트워킹 자원이 자동 생성됨. (물론 편집 가능)
					: 로컬 통신은 가능한 상태.

			step3. 옆의 메뉴바-vpc 눌러서 생성한 custom vpc 정보 확인
				: 생성한 custom vpc  클릭하면 나오는 "리소스 맵" 탭에서, 생성되있는 라우팅 테이블 택하여 클릭 
				: 보면 아무짓도 안했는데 라우팅 테이블 란에 라우팅 테이블이 하나 만들어져 있음. 이게 기본 라우팅 테이블로, 기본적으로 생성되는 거임
				: 라우팅 테이블이 존재하는 것으로 거꾸로 가상 라우터가 존재함을 유추 가능
				: 쨌뜬 자세히 확인해보면, 해당 라우팅 테이블에는 하나의 row 가 기입되어있음 : 대상(Destination) - VPC생성당시설정했던IPv4 CIDR, 대상(Target) - local , 상태 status-active

			step4. 옆의 메뉴바-네트워크ACL 눌러서 ACL 대시보드 
				: 인바운드 규칙 탭, 아웃바운드 규칙 클릭 >> 아무짓 안했는데도 기본적으로 규칙이 생성되있음
					: 0.0.0.0/0 (모든 IP범위) 를 allow 하는게 맨 첫줄 , 0.0.0.0/0 (모든 IP범위) 를 deny 하는게 맨 끝 줄



	2. 퍼블릭 서브넷 생성
		: 서브넷 >> 분리된 네트워크. 
			: VPC 의 IP CIDR 에서 분할된 IP CIDR.
			: 하나의 가용영역에 종속됨
			: 서브넷 생성시 다음을 정의 필요
				(1) VPC ID : 서브넷이 속하게될 VPC의 ID
					: 실습에서는 앞서 생성했던 custom VPC
				(2) 서브넷 이름 
					: 실습에서는 'CH3-Public-Subnet'으로 함
				(3) 가용 영역
					: 실습에서는 '아시아 태평양(서울)/ ap-northeast-2a'
				(4) IPv4 CIDR 블록 : 해당 서브넷에 할당할 IP 범위
					: 실습에서는 '10.3.1.0/24'

			: 서브넷 생성 시 표시되는 대표 세부 정보
				(1) IPv4 CIDR : 서브넷에 할당된 IP 대역
				(2) 가용영역 : 서브넷이 위치한 가용영역
				(3) VPC : 서브넷이 속한 VPC 정보
				(4) 라우팅 테이블 : 서브넷이 사용하는 라우팅 테이블 

		: 서브넷과 라우팅 테이블 >>
			: 서브넷 마다 라우팅 테이블 생성 시 다음을 정의 필요
				(1) 라우팅 테이블 이름
					: 실습에선 'CH3-Public-RT' 
				(2) VPC : 해당 라우팅 테이블이 속할 VPC 
					: 실습에서 생성했던 custom VPC

			: 서브넷 마다 라우팅 테이블 생성 후, 별도로 연결 작업 해줘야됨. 
				: 이건 라우팅 테이블  생성당시 같이 정의 못함


		: 서브넷과 인터넷 게이트웨이
			: 인터넷 게이트웨이를 생성하기 위해 다음을 정의 필요
				(1) 이름 태그
					: 실습에선 CH-IGW 로 함

			: 인터넷 게이트웨이 생성 이후 별도로 VPC 와 연결 작업 필요
				: 이건 게이트웨이 생성당시 같이 정의 못함

	
		: 절차
			step1. 옆의 메뉴바-서브넷 선택
				: 기본적으로 4개의 서브넷이 자동 생성되어있는데, 이건 기본 VPC 로 생성된 서브넷들임.

			step2. 서브넷 생성 버튼 누르고, 설정 후 , 서브넷 생성
				: 위에 적은 대로

			step3. 생성한 서브넷 클릭해 세부 정보 확인

			step4. 해당 서브넷의 라우팅 테이블 생성하기 
				step (1) 옆의 메뉴바 - 라우팅 테이블 - 라우팅 테이블 생성 버튼 클릭
				step (2) 위에 적은 대로 정의 후 생성 

			step5. 생성한 라우팅 테이블 세부 정보 확인
				: 라우팅 테이블을 생성한다고 해서 자동으로 서브넷과 연결시켜주진 않고, 덩그러니 있다. >> 개발자가 별도로 서브넷과 연결해줘야된다.
					: 생각해보면 라우팅 테이블 생성할 당시 VPC 까지만 입력했지, 서브넷 정보를 입력하는 절차는 없었다.

			step6. 라우팅 테이블을 서브넷과 연결 
				step (1) 해당 라우팅 테이블 클릭 후 - 서브넷 연결 탭 - 서브넷 연결 편집 버튼 : 새로 생성한 서브넷 체크 후 연결 저장 버튼 누름
				step (2) 다시 라우팅 테이블 확인해 보면 제대로 연결되어있음



			step7. 인터넷 게이트웨이 생성
				step (1) 옆의 메뉴바 - 인터넷 게이트웨이 - 인터넷 게이트웨이 생성 버튼 클릭
				step (2) 위에 적은 대로 정의 후 생성

			step8. 생성한 인터넷 게이트웨이 세부 정보 확인
				: 생성한 직후에는 Detached (분리) 로 뜬다. 즉 VPC 와 연결되지 않은 상태.
				: 인터넷 게이트웨이를 생성한다고 해서 자동으로 VPC 와 연결시켜주진 않고, 덩그러니 있다 >> 별도로 VPC 와 연결해줘야된다. 
					: 셍각해보면 internet gateway 생성 당시 서브넷은 커녕 VPC 조차도 입력 안했었다


			step9. 인터넷 게이트 웨이를 VPC 에 연결 
				step (1) 상세 정보 페이지의 "인터넷 게이트웨이 생성 버튼" 옆의 "작업" 드롭박스를 클릭하여 VPC 연결을 택
				step (2) custom VPC 를 선택한 후 , 인터넷 게이트웨이 연결 버튼 클릭
				step (3) 확인해보면 상태 정보가 Detached 에서 Attached 로 변경되어있음




			step9. 라우팅 테이블 편집
				step (1) 생성한 라우팅 테이블 체크하여 상세 정보 열기 
					: 확인해보면 destination 은 10.3.0.0/16 이고, target 은 local. >> 즉, local 만 통신 가능한 상태.
				step (2) 라우팅 탭 클릭 - 라우팅 편집 버튼 클릭
					1. Add route(라우팅 추가) 버튼 클릭
					2. Destination(대상) 에 0.0.0.0/0 입력
					3. Target(대상) 의 드롭 다운에서, internet Gateway 선텍하고, 바로 밑의 박스에선 앞서 생성한 게이트웨이 클릭 
					4. 변경사항 저장 클릭

				step (3) 편집된 라우팅 정보 확인 


	3. 퍼블릭 서브넷 환경에서 (EC2 인스턴스를 활용해) 통신을 확인	
		: EC2 인스턴스와 VPC 
			: VPC 를 VPC 콘솔쪽에서 생성한 후 , EC2 콘솔에서 EC2 인스턴스 생성할 때 해당 VPC 를 선택

		: EC2 인스턴스와 Subent 
			: subnet 을 VPC 콘솔쪽에서 생성한 후 , VPC 와 마찬가지로 EC2 인스턴스 생성할 떄 해당 subnet 을 선택
	
		: EC2 인스턴스의 보안 그룹
			: EC2의 인스턴스는 기본적으로 한 개의 보안 그룹으로 접근 통제
				:  직접 생성한 보안 그룹을 적용할 수도 있고, 서비스 자체적으로 (인스턴스 생성 당시) 새롭게 만들어주는 보안 그룹을 적용할 수도 있음
				: "보안 그룹" 생성 자체는 EC2 콘솔 쪽이 아니라 VPC 콘솔 쪽에서 진행하고, 생성한 "보안 그룹"을 적용하는 건 EC2 콘솔 쪽에서 EC2 인스턴스 생성할 떄 정하는 거임
			: 보안그룹 생성시 필요한 정보
				1. 보안그룹 이름 
					: 실습에서는 "MY-WEB-SSH-SG" 로 함
						: SSH 허용하는 Security Group 이란 의미서 지은 듯?

				2. VPC 선택 : 해당 보안 그룹이 적용될 VPC
					: 기본적으로는 디폴트 VPC 선택되어있음
					: 실습에서는 (디폴트 VPC가 아닌) 직접 생성한 VPC 선택

				3. 인바운드 규칙
					: Type (유형) >> 네트워크 트래픽에 개방할 프로토콜을 정의
						: 네트워크 트래픽에 프로토콜을 개방한다 === 해당 프로토콜의 트래픽이 접근 가능하게 한다.
						: Type 필드를 정의하면 , 그에따라 옆의 Protocol 필드와 Port 필드는 대부분 자동으로 채워진다
							: port 가 자동으로 채워지는건 보통 해당 프로토콜이 사용하는 포트가 특정되있기 떄문		
							: Type 필드 vs  (Type 필드 옆의 수정도 못하게 되어있는 Protocol 필드) >> 둘다 프로토콜을 의미
								: type 필드 >> 구체적인 프로토콜을 정의하는 필드
								: protocol 필드>> type 필드에서 정의한 프로토콜에 사용될 근본적인 프로토콜

						(0) HTTPS
						(1) HTTP 
						(2) SSH  
						(3) . . . .


					: source (소스) >> 보안 그룹에 연결된 인스턴스로의 인바운드 접근을 허용할 "특정 IP 주소" 혹은 "IP 범위"를 지정
						: 특정 IP 주소이건, 범위이건 CIDR 표기와 함께 입력
							: 특정 IP 주소를 택하는 경우 걍 CIDR 표기를 /32 로 하면 된다 (그러니까 8*4 32니까, 완전 일치해야 허용됨)
						: 실습에서는 "내 IP" (14.5.102.249/32 )를 택했다

					
		: (생성된) EC2 인스턴스의 네트워킹 상세 정보
			1. 퍼블릭 IPv4 주소 : EC2 인스턴스가 사용할 공인 IP주소
				: puTTy 로 접속하기 위해 메모해두기 - 실습에선: 52.78.54.203

			2. 프라이빗 IPv4 주소 : EC2 인스턴스가 ( VPC ) 내부 통신을 할 때 사용할 사설 IP 주소				: 실습에선 10.3.1.140 이었음

			3. VPC ID : 인스턴스 생성 당시 지정한 VPC 의 ID 
			4. subnet ID : 인스턴스 생성 당시 지정한 subnet의 ID 
			5. 가용영역 : 해당 인스턴스가 저장된 가용영역(= 해당 인스턴스가 속한 서브넷이 저장된 가용영역)

		: (생성된) EC2 인스턴스의 보안 상세 정보	
			: 적용된 보안그룹, 인바운드 규칙, 아웃바운드 규칙 확인 가능

		: ping 테스트 성공/실패 여부
			: 요청 시간이 만료되었습니다 안나옴 성공한 것.

		: 절차
			step1. 수동 보안 그룹 생성하기
				1. 왼쪽탭-보안-보안그룹- 보안그룹 생성 버튼 클릭 
					: EC2 서비스 쪽에서 생성하는거 아님 주의
				2. 인바운드 규칙 정의 : 위에 적은대로
				3. 제대로 정의됬나 확인 >> 결론적으론 HTTP 혹은 SSH 프로토콜의 내 IP 주소에서의 접근만 허용하는 규칙.

			step2. EC2 인스턴스 생성 : 이전 단원 수행한 내용에서 네트워크 설정 부분이 좀 추가되었다
				1. EC2 서비스 콘솔로 go - 인스턴스 시작 버튼 클릭
				2. 인스턴스 설정
					인스턴스명 : CH3-Public-EC2
					AMI ( OS 이미지 ): Amazon Linux 2023 AMI , 64 비트 아키텍쳐 
					인스턴스 유형 : t2.micro
					키페어: (이전에생성한키페어파일인)ongja_key
					네트워크 설정 : "편집" 버튼 클릭 후 상세 설정
						VPC : ( 디폴트 VPC가 아닌 ) 앞서 직접 생성한 VPC 선택
						서브넷 : 앞서 직접 생성한 public subnet 선택 
						퍼블릭 IP 자동 할당 여부 : "활성화" 선택
						방화벽(보안그룹) : "기존 보안 그룹" 선택
							: "새 보안 그룹" >> 걍 알아서 디폴트 보안 그룹 새로 생성해주고, 그거 사용
							: "기존 보안 그룹" >> 이미 정의된 , 존재하는 보안 그룹 사용
							
						
				3. 인스턴스 생성 버튼 누름
				4. 생성된 인스턴스 정보 확인


			step3. puTTY 로 생성한 인스턴스에 SSH 접속하여 초기 설정
				1. puTTy 열기
				2. puTTy 에서 초기 접근 설정 : 앞서 메모해둔 public IP 입력하고, 키 설정하고  나중에 또 사용하기 편하게 저장해두기.
				3. 로그인 : ec2-user
				4. 터미널에서 초기 설정
					0. sudo su -  
					1. yum install httpd -y : http 데몬 다운로드 
						: http데몬 >> http 통신 가능하게 해주는 얘. 웹 서버 백그라운드에서 실행되는 얘.
					2. systemctl start httpd : http 데몬 실행
						: systemctl >> 데몬 프로그램 실행시켜주는 명령어
					3. curl -L https://bit.ly/afbtest02 > /var/www/html/index.html : 접속시 기본적으로 표시할 정적웹페이지다운로드 및 (접속시 기본적으로 해당 웹페이지가 표시되도록) 설정 

			step4. (puTTY 로 EC2 인스턴스에 내부 접속하여) "EC2 인스턴스 --> 외부 인터넷" 방향의 통신 확인하기
				: 터미널에서 ping google.com 날리기 >>  
					PING google.com (142.250.207.110) 56(84) bytes of data.
					64 bytes from kix06s11-in-f14.1e100.net (142.250.207.110): icmp_seq=1 ttl=103 time=33.4 ms
					64 bytes from kix06s11-in-f14.1e100.net (142.250.207.110): icmp_seq=2 ttl=103 time=33.5 ms
					.
					.
					. 
					같이 나옴


			step5. (다양한 방법으로) "EC2 인스턴스 <-- 외부 인터넷" 방향의 통신 확인하기
			    : ( 아래의 test 중 ) 어떤 test는 통신 가능이고 어떤 test 는 통신 불가인 이유 >> 보안 그룹 설정 내용 때문에
					: 보안 그룹 설정 당시 (HTTP 와 SSH 프로토콜에 대해) 소스로 설정했던 14.5.102.249/32 ( 내가 작업중이었던 PC의 공인 IP ) 만 허용됨.
					: 와이파이 연결 유무에 따라 스마트폰에서의 접근이 되기도 안되기도 한 이유는 , 공유기를 쓰면 PC 와 같은 공인 IP 를 사용하게 되기 때문.

			    : 다음의 test 들을 수행
				test (1) 웹 브라우저에서 EC2 인스턴스에 접근 (url 창에 인스턴스의 public IP 입력) : 접근 가능
				
				test (2) PC의 터미널 창에서 EC2 인스턴스에 접근 (ping  52.78.54.203 32) : ping 통신 불가
				    : 뜨는 내용
					Ping 52.78.54.203 32바이트 데이터 사용:
					요청 시간이 만료되었습니다.
					요청 시간이 만료되었습니다.
					요청 시간이 만료되었습니다.
					요청 시간이 만료되었습니다.

					52.78.54.203에 대한 Ping 통계:
					패킷: 보냄 = 4, 받음 = 0, 손실 = 4 (100% 손실),

				test (3) 스마트폰의 "와이파이 연결을 해제한 상태에서" EC2 인스턴스에 접근 : 접근 불가

				test (4) 스마트폰의 "와이파이를 연결한 상태에서" EC2 인스턴스에 접근 : 접근 잘 됨



	4. 프라이빗 서브넷 생성
		: 프라이빗 서브넷은 기본적으로 프라이빗 네트워크 내부에서만 통신하는 용도이지만, NAT 게이트웨이를 사용하면 외부 인터넷 통신이 가능하다

		: NAT 게이트웨이
			: 유형 
				1. public  연결 유형 >> 인터넷 구간과 연결해주는(=통신 가능하게 하는) 유형
					: 실습에서는 프라이빗 서브넷과 외부 인터넷 간 통신이 목적이므로 public 유형 사용한다.
				2. private 연결 유형 >>다른 VPC 나 온프레미스 네트워크와 연결해주는 유형
				: https://velog.io/@shk0625/AWS-NAT-GATEWAY%EC%9D%98-%EC%97%B0%EA%B2%B0%EC%9C%A0%ED%98%95

				
			: 생성 시 다음을 정의 필요	
				(1) 이름
					: 실습에서는 "CH3-NAT-GW" 로 입력

				(2) 서브넷 : 생성할 NAT 게이트웨이가 "위치"하게 될 서브넷
					: 주의 >>  해당 NAT 게이트웨이를 사용할 private 서브넷들을 선택하는 과정이 아니라, 해당 NAT 게이트웨이의 작동을 위해 어디에 "위치"해야하는지를 명시하는거다. ( 그러니까 인터넷이랑 연결된 public 서브넷들 중 하나를 택해야한 다는 말 )
					: 실습에서는 앞서 생성한 CH3-Public-Subnet 선택

				(3) 연결 유형 : 게이트 웨이의 연결 유형을 public연결 ( 인터넷연결용 ) , private 연결( 다른 VPC 혹은온프레미스와의연결용 ) 중 택					: 실습에서는 public 연결 선택 
				(4) 탄력적 IP 할당 ID 
					: 걍 버튼 누름 할당됨

			: 참고로 NAT 게이트웨이는 생성한다고 바로 사용가능하진 않고, 생성 직후 몇 분간은 pending 상태였다가, 좀만 기다리면 avaliable 상태로 변한다


			: 생성시 확인 가능한 정보
				(1) 연결 유형:  public 연결 NAT 인지 private 연결 NAT 인지
					: 실습에선 public 

				(2) 상태 
					: 생성 직훈 pending , 좀 지나면 avaliabe
				(3) 기본 퍼블릭 IPv4주소(탄력적 IP 주소) : NAT gateway 가 사용할 고정 IP 주소 
				(4) 서브넷 : 해당 NAT gateway 가 속한, 위치한 서브넷
				(5) VPC : NAT gateway 가 생성된 VPC 
				
			

		: 절차
			step1. vpc 탭 -서브넷- 서브넷 생성 클릭
			step2. 서브넷 생성을 위해 다음을 정의
				(1) VPC ID : 앞서 생성한 VPC 택.
					: 앞서 서브넷 만들때와 동일한 VPC 를 택하게 되는 것이므로, 같은 VPC 에 속하는 서브넷을 만들게 되는 것.

				(2) 서브넷 이름 : 이번엔 'CH3-Private-Subnet' 으로 함
					: 앞서 서브넷 만들땐 'CH3-Public-Subnet'으로 함
		
				(3) 가용 영역 : 이번엔 ap-northeast-2c 선택
					: 앞서 public 서브넷 만들땐 ap-northeast-2a 로 했었음
						: 그러니까 각 서브넷은 같은 VPC 에 속해있지만, 다른 가용영역에 속하는 상황인 것.

				(4) IPv4 CIDR 블록 : 해당 서브넷에 할당할 IP 범위 : 이번엔 '10.3.2.0/24'
					: 앞서 public 서브넷 만들땐 10.3.1.0/24 로 했었음 
						: 그러니까 public 서브넷의 대역은 10.3.1.X 인거고, private 서브넷의 대역은 10.3.2.X 인거임

			step3. 생성된 서브넷 정보 확인 : 기본 라우팅 테이블이 있는 걸 확인 가능

			step4. (사용자 정의) 라우팅 테이블 생성하기
				step (1) vpc 탭 - 라우팅테이블- 라우팅 테이블 생성 버튼 클릭
				step (2) 라우팅 테이블 생성을 위해 다음을 정의
					1. 이름 : CH3-Private-RT
					2. VPC : 앞서 생성했던 VPC. 


			step5. 생성한 라우팅 테이블을 서브넷에 연결하기 
				step (1) 새로 생성한 라우팅 테이블 클릭해서 상세 정보 나오게 한 후에, "서브넷 연결 탭" 에서 "서브넷 연결 편집" 버튼 클릭
				step (2) 앞서 생성한 private subnet 선택 후 연결 저장

	
			step6. NAT 게이트웨이 생성하기 
				step (1) 182쪽부터 계쏙 
			- 생성한 프라이빗 인스턴스의 프라이빗 IP 주소 : 10.3.2.77

	5. 프라이빗 서브넷 환경에서 통신을 확인
		: 


	6. 실습을 위해 생성된 자원을 모두 삭제







		


	





		 
		
